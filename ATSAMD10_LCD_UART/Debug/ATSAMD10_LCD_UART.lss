
ATSAMD10_LCD_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002170  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  2000000c  0000217c  0002000c  2**2
                  ALLOC
  3 .stack        00000400  20000068  000021d8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022d27  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f13  00000000  00000000  00042db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000072fd  00000000  00000000  00045cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003f8  00000000  00000000  0004cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000958  00000000  00000000  0004d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001494d  00000000  00000000  0004dd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ae4  00000000  00000000  00062661  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e57d  00000000  00000000  0006c145  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b0c  00000000  00000000  000da6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 04 00 20 e9 19 00 00 e5 19 00 00 e5 19 00 00     h.. ............
	...
      2c:	e5 19 00 00 00 00 00 00 00 00 00 00 e5 19 00 00     ................
      3c:	e5 19 00 00 e5 19 00 00 e5 19 00 00 e5 19 00 00     ................
      4c:	e5 19 00 00 e5 19 00 00 e5 19 00 00 e5 19 00 00     ................
      5c:	00 00 00 00 e5 19 00 00 e5 19 00 00 e5 19 00 00     ................
      6c:	e5 19 00 00 e5 19 00 00 e5 19 00 00 e5 19 00 00     ................
      7c:	e5 19 00 00 e5 19 00 00 e5 19 00 00 e5 19 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	00002170 	.word	0x00002170

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	00002170 	.word	0x00002170
      e4:	00002170 	.word	0x00002170
      e8:	00000000 	.word	0x00000000

000000ec <configure_port_pins>:
#define MAX_X 128
#define MAX_Y 160


void configure_port_pins(void)
{
      ec:	b500      	push	{lr}
      ee:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
      f0:	a901      	add	r1, sp, #4
      f2:	2301      	movs	r3, #1
      f4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
      f6:	2200      	movs	r2, #0
      f8:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
      fa:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA16, &config_port_pin);
      fc:	2010      	movs	r0, #16
      fe:	4b02      	ldr	r3, [pc, #8]	; (108 <configure_port_pins+0x1c>)
     100:	4798      	blx	r3
}
     102:	b003      	add	sp, #12
     104:	bd00      	pop	{pc}
     106:	46c0      	nop			; (mov r8, r8)
     108:	00001269 	.word	0x00001269

0000010c <configure_spi_master>:
struct spi_module spi_master_instance;
struct spi_slave_inst slave;


void configure_spi_master(void)
{
     10c:	b530      	push	{r4, r5, lr}
     10e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     110:	4c24      	ldr	r4, [pc, #144]	; (1a4 <configure_spi_master+0x98>)
     112:	2318      	movs	r3, #24
     114:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     116:	2300      	movs	r3, #0
     118:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     11a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     11c:	a901      	add	r1, sp, #4
     11e:	2201      	movs	r2, #1
     120:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     122:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     124:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     126:	2018      	movs	r0, #24
     128:	4b1f      	ldr	r3, [pc, #124]	; (1a8 <configure_spi_master+0x9c>)
     12a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     12c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     12e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     130:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     132:	2900      	cmp	r1, #0
     134:	d104      	bne.n	140 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
     136:	095a      	lsrs	r2, r3, #5
     138:	01d2      	lsls	r2, r2, #7
     13a:	491c      	ldr	r1, [pc, #112]	; (1ac <configure_spi_master+0xa0>)
     13c:	468c      	mov	ip, r1
     13e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     140:	211f      	movs	r1, #31
     142:	4019      	ands	r1, r3
     144:	2301      	movs	r3, #1
     146:	0018      	movs	r0, r3
     148:	4088      	lsls	r0, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     14a:	6190      	str	r0, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
     14c:	ac02      	add	r4, sp, #8
     14e:	7023      	strb	r3, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     150:	2500      	movs	r5, #0
     152:	9503      	str	r5, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     154:	9504      	str	r5, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     156:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     158:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     15a:	74a3      	strb	r3, [r4, #18]
	config->select_slave_low_detect_enable= true;
     15c:	74e3      	strb	r3, [r4, #19]
	config->master_slave_select_enable= false;
     15e:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     160:	3323      	adds	r3, #35	; 0x23
     162:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     164:	220c      	movs	r2, #12
     166:	2100      	movs	r1, #0
     168:	a808      	add	r0, sp, #32
     16a:	4b11      	ldr	r3, [pc, #68]	; (1b0 <configure_spi_master+0xa4>)
     16c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
     16e:	60e5      	str	r5, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
     170:	4b10      	ldr	r3, [pc, #64]	; (1b4 <configure_spi_master+0xa8>)
     172:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <configure_spi_master+0xac>)
     176:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
     178:	2301      	movs	r3, #1
     17a:	425b      	negs	r3, r3
     17c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
     17e:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
     180:	4b0e      	ldr	r3, [pc, #56]	; (1bc <configure_spi_master+0xb0>)
     182:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
     184:	4d0e      	ldr	r5, [pc, #56]	; (1c0 <configure_spi_master+0xb4>)
     186:	0022      	movs	r2, r4
     188:	490e      	ldr	r1, [pc, #56]	; (1c4 <configure_spi_master+0xb8>)
     18a:	0028      	movs	r0, r5
     18c:	4b0e      	ldr	r3, [pc, #56]	; (1c8 <configure_spi_master+0xbc>)
     18e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     190:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     192:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     194:	2b00      	cmp	r3, #0
     196:	d1fc      	bne.n	192 <configure_spi_master+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     198:	6813      	ldr	r3, [r2, #0]
     19a:	2102      	movs	r1, #2
     19c:	430b      	orrs	r3, r1
     19e:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
     1a0:	b011      	add	sp, #68	; 0x44
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000058 	.word	0x20000058
     1a8:	00001269 	.word	0x00001269
     1ac:	41004400 	.word	0x41004400
     1b0:	00001ee1 	.word	0x00001ee1
     1b4:	00160002 	.word	0x00160002
     1b8:	00170002 	.word	0x00170002
     1bc:	00b71b00 	.word	0x00b71b00
     1c0:	2000004c 	.word	0x2000004c
     1c4:	42000c00 	.word	0x42000c00
     1c8:	00000d99 	.word	0x00000d99

000001cc <spi_io>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1cc:	4b03      	ldr	r3, [pc, #12]	; (1dc <spi_io+0x10>)
     1ce:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     1d0:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     1d2:	07d2      	lsls	r2, r2, #31
     1d4:	d500      	bpl.n	1d8 <spi_io+0xc>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     1d6:	6298      	str	r0, [r3, #40]	; 0x28


void spi_io(unsigned char o) {
	spi_write(&spi_master_instance,o);
}
     1d8:	4770      	bx	lr
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	2000004c 	.word	0x2000004c

000001e0 <LCD_command>:

void LCD_command(unsigned char com) {
     1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1e2:	0007      	movs	r7, r0
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1e4:	2280      	movs	r2, #128	; 0x80
     1e6:	0252      	lsls	r2, r2, #9
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <LCD_command+0x2c>)
     1ea:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(DAT_PIN,false);
	spi_select_slave(&spi_master_instance, &slave, true);
     1ec:	4e08      	ldr	r6, [pc, #32]	; (210 <LCD_command+0x30>)
     1ee:	4d09      	ldr	r5, [pc, #36]	; (214 <LCD_command+0x34>)
     1f0:	2201      	movs	r2, #1
     1f2:	0031      	movs	r1, r6
     1f4:	0028      	movs	r0, r5
     1f6:	4c08      	ldr	r4, [pc, #32]	; (218 <LCD_command+0x38>)
     1f8:	47a0      	blx	r4
	spi_io(com);
     1fa:	0038      	movs	r0, r7
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <LCD_command+0x3c>)
     1fe:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     200:	2200      	movs	r2, #0
     202:	0031      	movs	r1, r6
     204:	0028      	movs	r0, r5
     206:	47a0      	blx	r4
}
     208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	20000058 	.word	0x20000058
     214:	2000004c 	.word	0x2000004c
     218:	000010cd 	.word	0x000010cd
     21c:	000001cd 	.word	0x000001cd

00000220 <LCD_data>:

void LCD_data(unsigned char dat) {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     222:	0007      	movs	r7, r0
		port_base->OUTSET.reg = pin_mask;
     224:	2280      	movs	r2, #128	; 0x80
     226:	0252      	lsls	r2, r2, #9
     228:	4b08      	ldr	r3, [pc, #32]	; (24c <LCD_data+0x2c>)
     22a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     22c:	4e08      	ldr	r6, [pc, #32]	; (250 <LCD_data+0x30>)
     22e:	4d09      	ldr	r5, [pc, #36]	; (254 <LCD_data+0x34>)
     230:	2201      	movs	r2, #1
     232:	0031      	movs	r1, r6
     234:	0028      	movs	r0, r5
     236:	4c08      	ldr	r4, [pc, #32]	; (258 <LCD_data+0x38>)
     238:	47a0      	blx	r4
	spi_io(dat);
     23a:	0038      	movs	r0, r7
     23c:	4b07      	ldr	r3, [pc, #28]	; (25c <LCD_data+0x3c>)
     23e:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     240:	2200      	movs	r2, #0
     242:	0031      	movs	r1, r6
     244:	0028      	movs	r0, r5
     246:	47a0      	blx	r4
}
     248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	41004400 	.word	0x41004400
     250:	20000058 	.word	0x20000058
     254:	2000004c 	.word	0x2000004c
     258:	000010cd 	.word	0x000010cd
     25c:	000001cd 	.word	0x000001cd

00000260 <LCD_data16>:

void LCD_data16(unsigned short dat) {
     260:	b5f0      	push	{r4, r5, r6, r7, lr}
     262:	b083      	sub	sp, #12
     264:	0004      	movs	r4, r0
     266:	2280      	movs	r2, #128	; 0x80
     268:	0252      	lsls	r2, r2, #9
     26a:	4b0b      	ldr	r3, [pc, #44]	; (298 <LCD_data16+0x38>)
     26c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     26e:	4e0b      	ldr	r6, [pc, #44]	; (29c <LCD_data16+0x3c>)
     270:	4d0b      	ldr	r5, [pc, #44]	; (2a0 <LCD_data16+0x40>)
     272:	2201      	movs	r2, #1
     274:	0031      	movs	r1, r6
     276:	0028      	movs	r0, r5
     278:	4f0a      	ldr	r7, [pc, #40]	; (2a4 <LCD_data16+0x44>)
     27a:	47b8      	blx	r7
	spi_io(dat>>8);
     27c:	9401      	str	r4, [sp, #4]
     27e:	0a20      	lsrs	r0, r4, #8
     280:	4c09      	ldr	r4, [pc, #36]	; (2a8 <LCD_data16+0x48>)
     282:	47a0      	blx	r4
	spi_io(dat);
     284:	466b      	mov	r3, sp
     286:	7918      	ldrb	r0, [r3, #4]
     288:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance, &slave, false);
     28a:	2200      	movs	r2, #0
     28c:	0031      	movs	r1, r6
     28e:	0028      	movs	r0, r5
     290:	47b8      	blx	r7
}
     292:	b003      	add	sp, #12
     294:	bdf0      	pop	{r4, r5, r6, r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	41004400 	.word	0x41004400
     29c:	20000058 	.word	0x20000058
     2a0:	2000004c 	.word	0x2000004c
     2a4:	000010cd 	.word	0x000010cd
     2a8:	000001cd 	.word	0x000001cd

000002ac <LCD_init>:




void LCD_init() {
     2ac:	b570      	push	{r4, r5, r6, lr}
  LCD_command(ST7735_SWRESET);//software reset
     2ae:	2001      	movs	r0, #1
     2b0:	4d6e      	ldr	r5, [pc, #440]	; (46c <STACK_SIZE+0x6c>)
     2b2:	47a8      	blx	r5
  delay_ms(50);
     2b4:	2032      	movs	r0, #50	; 0x32
     2b6:	4e6e      	ldr	r6, [pc, #440]	; (470 <STACK_SIZE+0x70>)
     2b8:	47b0      	blx	r6
	LCD_command(ST7735_SLPOUT);//exit sleep
     2ba:	2011      	movs	r0, #17
     2bc:	47a8      	blx	r5
	delay_ms(5);
     2be:	2005      	movs	r0, #5
     2c0:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
     2c2:	20b1      	movs	r0, #177	; 0xb1
     2c4:	47a8      	blx	r5
	LCD_data(0x01);
     2c6:	2001      	movs	r0, #1
     2c8:	4c6a      	ldr	r4, [pc, #424]	; (474 <STACK_SIZE+0x74>)
     2ca:	47a0      	blx	r4
	LCD_data(0x2C);
     2cc:	202c      	movs	r0, #44	; 0x2c
     2ce:	47a0      	blx	r4
	LCD_data(0x2D);
     2d0:	202d      	movs	r0, #45	; 0x2d
     2d2:	47a0      	blx	r4
	delay_ms(1);
     2d4:	2001      	movs	r0, #1
     2d6:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
     2d8:	20b2      	movs	r0, #178	; 0xb2
     2da:	47a8      	blx	r5
	LCD_data(0x01);
     2dc:	2001      	movs	r0, #1
     2de:	47a0      	blx	r4
	LCD_data(0x2C);
     2e0:	202c      	movs	r0, #44	; 0x2c
     2e2:	47a0      	blx	r4
	LCD_data(0x2D);
     2e4:	202d      	movs	r0, #45	; 0x2d
     2e6:	47a0      	blx	r4
	delay_ms(1);
     2e8:	2001      	movs	r0, #1
     2ea:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
     2ec:	20b3      	movs	r0, #179	; 0xb3
     2ee:	47a8      	blx	r5
	LCD_data(0x01);
     2f0:	2001      	movs	r0, #1
     2f2:	47a0      	blx	r4
	LCD_data(0x2C);
     2f4:	202c      	movs	r0, #44	; 0x2c
     2f6:	47a0      	blx	r4
	LCD_data(0x2D);
     2f8:	202d      	movs	r0, #45	; 0x2d
     2fa:	47a0      	blx	r4
	LCD_data(0x01);
     2fc:	2001      	movs	r0, #1
     2fe:	47a0      	blx	r4
	LCD_data(0x2C);
     300:	202c      	movs	r0, #44	; 0x2c
     302:	47a0      	blx	r4
	LCD_data(0x2D);
     304:	202d      	movs	r0, #45	; 0x2d
     306:	47a0      	blx	r4
	delay_ms(1);
     308:	2001      	movs	r0, #1
     30a:	47b0      	blx	r6
	LCD_command(ST7735_INVCTR);//display inversion
     30c:	20b4      	movs	r0, #180	; 0xb4
     30e:	47a8      	blx	r5
	LCD_data(0x07);
     310:	2007      	movs	r0, #7
     312:	47a0      	blx	r4
	delay_ms(1);
     314:	2001      	movs	r0, #1
     316:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR1);
     318:	20c0      	movs	r0, #192	; 0xc0
     31a:	47a8      	blx	r5
	LCD_data(0x0A);//4.30 - 0x0A
     31c:	200a      	movs	r0, #10
     31e:	47a0      	blx	r4
	LCD_data(0x02);//0x05
     320:	2002      	movs	r0, #2
     322:	47a0      	blx	r4
	LCD_data(0x84);//added auto mode
     324:	2084      	movs	r0, #132	; 0x84
     326:	47a0      	blx	r4
	delay_ms(1);
     328:	2001      	movs	r0, #1
     32a:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR2);
     32c:	20c1      	movs	r0, #193	; 0xc1
     32e:	47a8      	blx	r5
	LCD_data(0xC5);
     330:	20c5      	movs	r0, #197	; 0xc5
     332:	47a0      	blx	r4
	delay_ms(1);
     334:	2001      	movs	r0, #1
     336:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR3);
     338:	20c2      	movs	r0, #194	; 0xc2
     33a:	47a8      	blx	r5
	LCD_data(0x0A);
     33c:	200a      	movs	r0, #10
     33e:	47a0      	blx	r4
	LCD_data(0x00);
     340:	2000      	movs	r0, #0
     342:	47a0      	blx	r4
	delay_ms(1);
     344:	2001      	movs	r0, #1
     346:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR4);
     348:	20c3      	movs	r0, #195	; 0xc3
     34a:	47a8      	blx	r5
	LCD_data(0x8A);
     34c:	208a      	movs	r0, #138	; 0x8a
     34e:	47a0      	blx	r4
	LCD_data(0x2A);
     350:	202a      	movs	r0, #42	; 0x2a
     352:	47a0      	blx	r4
	delay_ms(1);
     354:	2001      	movs	r0, #1
     356:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR5);
     358:	20c4      	movs	r0, #196	; 0xc4
     35a:	47a8      	blx	r5
	LCD_data(0x8A);
     35c:	208a      	movs	r0, #138	; 0x8a
     35e:	47a0      	blx	r4
	LCD_data(0xEE);
     360:	20ee      	movs	r0, #238	; 0xee
     362:	47a0      	blx	r4
	delay_ms(1);
     364:	2001      	movs	r0, #1
     366:	47b0      	blx	r6
	LCD_command(ST7735_VMCTR1);
     368:	20c5      	movs	r0, #197	; 0xc5
     36a:	47a8      	blx	r5
	LCD_data(0x0E);
     36c:	200e      	movs	r0, #14
     36e:	47a0      	blx	r4
	delay_ms(1);
     370:	2001      	movs	r0, #1
     372:	47b0      	blx	r6
	LCD_command(ST7735_INVOFF);
     374:	2020      	movs	r0, #32
     376:	47a8      	blx	r5
	LCD_command(ST7735_MADCTL);
     378:	2036      	movs	r0, #54	; 0x36
     37a:	47a8      	blx	r5
	LCD_data(0xC8);
     37c:	20c8      	movs	r0, #200	; 0xc8
     37e:	47a0      	blx	r4
	delay_ms(1);
     380:	2001      	movs	r0, #1
     382:	47b0      	blx	r6
	LCD_command(ST7735_COLMOD);
     384:	203a      	movs	r0, #58	; 0x3a
     386:	47a8      	blx	r5
	LCD_data(0x05);
     388:	2005      	movs	r0, #5
     38a:	47a0      	blx	r4
	delay_ms(1);
     38c:	2001      	movs	r0, #1
     38e:	47b0      	blx	r6
	LCD_command(ST7735_CASET);
     390:	202a      	movs	r0, #42	; 0x2a
     392:	47a8      	blx	r5
	LCD_data(0x00);
     394:	2000      	movs	r0, #0
     396:	47a0      	blx	r4
	LCD_data(0x00);
     398:	2000      	movs	r0, #0
     39a:	47a0      	blx	r4
	LCD_data(0x00);
     39c:	2000      	movs	r0, #0
     39e:	47a0      	blx	r4
	LCD_data(0x7F);
     3a0:	207f      	movs	r0, #127	; 0x7f
     3a2:	47a0      	blx	r4
	delay_ms(1);
     3a4:	2001      	movs	r0, #1
     3a6:	47b0      	blx	r6
	LCD_command(ST7735_RASET);
     3a8:	202b      	movs	r0, #43	; 0x2b
     3aa:	47a8      	blx	r5
	LCD_data(0x00);
     3ac:	2000      	movs	r0, #0
     3ae:	47a0      	blx	r4
	LCD_data(0x00);
     3b0:	2000      	movs	r0, #0
     3b2:	47a0      	blx	r4
	LCD_data(0x00);
     3b4:	2000      	movs	r0, #0
     3b6:	47a0      	blx	r4
	LCD_data(0x9F);
     3b8:	209f      	movs	r0, #159	; 0x9f
     3ba:	47a0      	blx	r4
	delay_ms(1);
     3bc:	2001      	movs	r0, #1
     3be:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRP1);
     3c0:	20e0      	movs	r0, #224	; 0xe0
     3c2:	47a8      	blx	r5
	LCD_data(0x02);
     3c4:	2002      	movs	r0, #2
     3c6:	47a0      	blx	r4
	LCD_data(0x1C);
     3c8:	201c      	movs	r0, #28
     3ca:	47a0      	blx	r4
	LCD_data(0x07);
     3cc:	2007      	movs	r0, #7
     3ce:	47a0      	blx	r4
	LCD_data(0x12);
     3d0:	2012      	movs	r0, #18
     3d2:	47a0      	blx	r4
	LCD_data(0x37);
     3d4:	2037      	movs	r0, #55	; 0x37
     3d6:	47a0      	blx	r4
	LCD_data(0x32);
     3d8:	2032      	movs	r0, #50	; 0x32
     3da:	47a0      	blx	r4
	LCD_data(0x29);
     3dc:	2029      	movs	r0, #41	; 0x29
     3de:	47a0      	blx	r4
	LCD_data(0x2D);
     3e0:	202d      	movs	r0, #45	; 0x2d
     3e2:	47a0      	blx	r4
	LCD_data(0x29);
     3e4:	2029      	movs	r0, #41	; 0x29
     3e6:	47a0      	blx	r4
	LCD_data(0x25);
     3e8:	2025      	movs	r0, #37	; 0x25
     3ea:	47a0      	blx	r4
	LCD_data(0x2B);
     3ec:	202b      	movs	r0, #43	; 0x2b
     3ee:	47a0      	blx	r4
	LCD_data(0x39);
     3f0:	2039      	movs	r0, #57	; 0x39
     3f2:	47a0      	blx	r4
	LCD_data(0x00);
     3f4:	2000      	movs	r0, #0
     3f6:	47a0      	blx	r4
	LCD_data(0x01);
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
	LCD_data(0x03);
     3fc:	2003      	movs	r0, #3
     3fe:	47a0      	blx	r4
	LCD_data(0x10);
     400:	2010      	movs	r0, #16
     402:	47a0      	blx	r4
	delay_ms(1);
     404:	2001      	movs	r0, #1
     406:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRN1);
     408:	20e1      	movs	r0, #225	; 0xe1
     40a:	47a8      	blx	r5
	LCD_data(0x03);
     40c:	2003      	movs	r0, #3
     40e:	47a0      	blx	r4
	LCD_data(0x1D);
     410:	201d      	movs	r0, #29
     412:	47a0      	blx	r4
	LCD_data(0x07);
     414:	2007      	movs	r0, #7
     416:	47a0      	blx	r4
	LCD_data(0x06);
     418:	2006      	movs	r0, #6
     41a:	47a0      	blx	r4
	LCD_data(0x2E);
     41c:	202e      	movs	r0, #46	; 0x2e
     41e:	47a0      	blx	r4
	LCD_data(0x2C);
     420:	202c      	movs	r0, #44	; 0x2c
     422:	47a0      	blx	r4
	LCD_data(0x29);
     424:	2029      	movs	r0, #41	; 0x29
     426:	47a0      	blx	r4
	LCD_data(0x2D);
     428:	202d      	movs	r0, #45	; 0x2d
     42a:	47a0      	blx	r4
	LCD_data(0x2E);
     42c:	202e      	movs	r0, #46	; 0x2e
     42e:	47a0      	blx	r4
	LCD_data(0x2E);
     430:	202e      	movs	r0, #46	; 0x2e
     432:	47a0      	blx	r4
	LCD_data(0x37);
     434:	2037      	movs	r0, #55	; 0x37
     436:	47a0      	blx	r4
	LCD_data(0x3F);
     438:	203f      	movs	r0, #63	; 0x3f
     43a:	47a0      	blx	r4
	LCD_data(0x00);
     43c:	2000      	movs	r0, #0
     43e:	47a0      	blx	r4
	LCD_data(0x00);
     440:	2000      	movs	r0, #0
     442:	47a0      	blx	r4
	LCD_data(0x02);
     444:	2002      	movs	r0, #2
     446:	47a0      	blx	r4
	LCD_data(0x10);
     448:	2010      	movs	r0, #16
     44a:	47a0      	blx	r4
	delay_ms(1);
     44c:	2001      	movs	r0, #1
     44e:	47b0      	blx	r6
	LCD_command(ST7735_NORON);
     450:	2013      	movs	r0, #19
     452:	47a8      	blx	r5
	delay_ms(10);
     454:	200a      	movs	r0, #10
     456:	47b0      	blx	r6
	LCD_command(ST7735_DISPON);
     458:	2029      	movs	r0, #41	; 0x29
     45a:	47a8      	blx	r5
	delay_ms(100);
     45c:	2064      	movs	r0, #100	; 0x64
     45e:	47b0      	blx	r6
	LCD_command(ST7735_MADCTL); // rotation
     460:	2036      	movs	r0, #54	; 0x36
     462:	47a8      	blx	r5
    LCD_data(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
     464:	20c0      	movs	r0, #192	; 0xc0
     466:	47a0      	blx	r4
}
     468:	bd70      	pop	{r4, r5, r6, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	000001e1 	.word	0x000001e1
     470:	00000ab1 	.word	0x00000ab1
     474:	00000221 	.word	0x00000221

00000478 <LCD_setAddr>:
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
  LCD_data16(color);
}

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
     478:	b5f0      	push	{r4, r5, r6, r7, lr}
     47a:	b083      	sub	sp, #12
     47c:	0004      	movs	r4, r0
     47e:	000e      	movs	r6, r1
     480:	0017      	movs	r7, r2
     482:	9301      	str	r3, [sp, #4]
  LCD_command(ST7735_CASET); // Column
     484:	202a      	movs	r0, #42	; 0x2a
     486:	4d08      	ldr	r5, [pc, #32]	; (4a8 <LCD_setAddr+0x30>)
     488:	47a8      	blx	r5
  LCD_data16(x0);
     48a:	0020      	movs	r0, r4
     48c:	4c07      	ldr	r4, [pc, #28]	; (4ac <LCD_setAddr+0x34>)
     48e:	47a0      	blx	r4
	LCD_data16(x1);
     490:	0038      	movs	r0, r7
     492:	47a0      	blx	r4
	LCD_command(ST7735_RASET); // Page
     494:	202b      	movs	r0, #43	; 0x2b
     496:	47a8      	blx	r5
	LCD_data16(y0);
     498:	0030      	movs	r0, r6
     49a:	47a0      	blx	r4
	LCD_data16(y1);
     49c:	9801      	ldr	r0, [sp, #4]
     49e:	47a0      	blx	r4
	LCD_command(ST7735_RAMWR); // Into RAM
     4a0:	202c      	movs	r0, #44	; 0x2c
     4a2:	47a8      	blx	r5
}
     4a4:	b003      	add	sp, #12
     4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a8:	000001e1 	.word	0x000001e1
     4ac:	00000261 	.word	0x00000261

000004b0 <LCD_drawPixel>:
void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
     4b0:	b570      	push	{r4, r5, r6, lr}
     4b2:	0014      	movs	r4, r2
  LCD_setAddr(x,y,x+1,y+1);
     4b4:	1c4b      	adds	r3, r1, #1
     4b6:	b29b      	uxth	r3, r3
     4b8:	1c42      	adds	r2, r0, #1
     4ba:	b292      	uxth	r2, r2
     4bc:	4d02      	ldr	r5, [pc, #8]	; (4c8 <LCD_drawPixel+0x18>)
     4be:	47a8      	blx	r5
  LCD_data16(color);
     4c0:	0020      	movs	r0, r4
     4c2:	4b02      	ldr	r3, [pc, #8]	; (4cc <LCD_drawPixel+0x1c>)
     4c4:	4798      	blx	r3
}
     4c6:	bd70      	pop	{r4, r5, r6, pc}
     4c8:	00000479 	.word	0x00000479
     4cc:	00000261 	.word	0x00000261

000004d0 <LCD_drawYLine>:
void LCD_drawYLine(short y,int c){
     4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<MAX_Y;i++){
     4d2:	2400      	movs	r4, #0
		LCD_drawPixel(y,i,c);
     4d4:	b28e      	uxth	r6, r1
     4d6:	b285      	uxth	r5, r0
     4d8:	4f04      	ldr	r7, [pc, #16]	; (4ec <LCD_drawYLine+0x1c>)
     4da:	b2a1      	uxth	r1, r4
     4dc:	0032      	movs	r2, r6
     4de:	0028      	movs	r0, r5
     4e0:	47b8      	blx	r7
	for(i=0;i<MAX_Y;i++){
     4e2:	3401      	adds	r4, #1
     4e4:	2ca0      	cmp	r4, #160	; 0xa0
     4e6:	d1f8      	bne.n	4da <LCD_drawYLine+0xa>
}
     4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	000004b1 	.word	0x000004b1

000004f0 <LCD_drawXLine>:
void LCD_drawXLine(short x,int c){
     4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<MAX_X;i++){
     4f2:	2400      	movs	r4, #0
		LCD_drawPixel(i,x,c);
     4f4:	b28e      	uxth	r6, r1
     4f6:	b285      	uxth	r5, r0
     4f8:	4f04      	ldr	r7, [pc, #16]	; (50c <LCD_drawXLine+0x1c>)
     4fa:	b2a0      	uxth	r0, r4
     4fc:	0032      	movs	r2, r6
     4fe:	0029      	movs	r1, r5
     500:	47b8      	blx	r7
	for(i=0;i<MAX_X;i++){
     502:	3401      	adds	r4, #1
     504:	2c80      	cmp	r4, #128	; 0x80
     506:	d1f8      	bne.n	4fa <LCD_drawXLine+0xa>
}
     508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	000004b1 	.word	0x000004b1

00000510 <drawChar>:
void drawChar(short x, short y, unsigned char c, short fg, short bg){
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	46de      	mov	lr, fp
     514:	4657      	mov	r7, sl
     516:	464e      	mov	r6, r9
     518:	4645      	mov	r5, r8
     51a:	b5e0      	push	{r5, r6, r7, lr}
     51c:	b085      	sub	sp, #20
     51e:	9103      	str	r1, [sp, #12]
     520:	9301      	str	r3, [sp, #4]
     522:	ab0e      	add	r3, sp, #56	; 0x38
     524:	2400      	movs	r4, #0
     526:	5f1b      	ldrsh	r3, [r3, r4]
     528:	9302      	str	r3, [sp, #8]
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
     52a:	2380      	movs	r3, #128	; 0x80
     52c:	1a1b      	subs	r3, r3, r0
     52e:	2b07      	cmp	r3, #7
     530:	dd37      	ble.n	5a2 <drawChar+0x92>
     532:	23a0      	movs	r3, #160	; 0xa0
     534:	1a5b      	subs	r3, r3, r1
     536:	2b07      	cmp	r3, #7
     538:	dd33      	ble.n	5a2 <drawChar+0x92>
     53a:	3a20      	subs	r2, #32
     53c:	b2d2      	uxtb	r2, r2
     53e:	0093      	lsls	r3, r2, #2
     540:	189a      	adds	r2, r3, r2
     542:	4b1b      	ldr	r3, [pc, #108]	; (5b0 <drawChar+0xa0>)
     544:	469b      	mov	fp, r3
     546:	4493      	add	fp, r2
     548:	b286      	uxth	r6, r0
     54a:	1d73      	adds	r3, r6, #5
     54c:	b29b      	uxth	r3, r3
     54e:	4698      	mov	r8, r3
                    LCD_drawPixel(x+i,y+j,bg);
     550:	4b18      	ldr	r3, [pc, #96]	; (5b4 <drawChar+0xa4>)
     552:	469a      	mov	sl, r3
                    LCD_drawPixel(x+i,y+j,fg);
     554:	4699      	mov	r9, r3
     556:	9600      	str	r6, [sp, #0]
     558:	e01c      	b.n	594 <drawChar+0x84>
                    LCD_drawPixel(x+i,y+j,bg);
     55a:	466b      	mov	r3, sp
     55c:	891a      	ldrh	r2, [r3, #8]
     55e:	0021      	movs	r1, r4
     560:	9800      	ldr	r0, [sp, #0]
     562:	47d0      	blx	sl
            for(j=0;j<8;j++){
     564:	3501      	adds	r5, #1
     566:	3401      	adds	r4, #1
     568:	b2a4      	uxth	r4, r4
     56a:	2d08      	cmp	r5, #8
     56c:	d009      	beq.n	582 <drawChar+0x72>
                if ((pixels>>j)&1==1){
     56e:	0033      	movs	r3, r6
     570:	412b      	asrs	r3, r5
     572:	421f      	tst	r7, r3
     574:	d0f1      	beq.n	55a <drawChar+0x4a>
                    LCD_drawPixel(x+i,y+j,fg);
     576:	466b      	mov	r3, sp
     578:	889a      	ldrh	r2, [r3, #4]
     57a:	0021      	movs	r1, r4
     57c:	9800      	ldr	r0, [sp, #0]
     57e:	47c8      	blx	r9
     580:	e7f0      	b.n	564 <drawChar+0x54>
     582:	2301      	movs	r3, #1
     584:	469c      	mov	ip, r3
     586:	44e3      	add	fp, ip
     588:	9e00      	ldr	r6, [sp, #0]
     58a:	3601      	adds	r6, #1
     58c:	b2b3      	uxth	r3, r6
     58e:	9300      	str	r3, [sp, #0]
        for(i=0;i<5;i++){
     590:	4543      	cmp	r3, r8
     592:	d006      	beq.n	5a2 <drawChar+0x92>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
     594:	465b      	mov	r3, fp
     596:	781e      	ldrb	r6, [r3, #0]
     598:	466b      	mov	r3, sp
     59a:	899c      	ldrh	r4, [r3, #12]
            for(j=0;j<8;j++){
     59c:	2500      	movs	r5, #0
                if ((pixels>>j)&1==1){
     59e:	2701      	movs	r7, #1
     5a0:	e7e5      	b.n	56e <drawChar+0x5e>
}
     5a2:	b005      	add	sp, #20
     5a4:	bc3c      	pop	{r2, r3, r4, r5}
     5a6:	4690      	mov	r8, r2
     5a8:	4699      	mov	r9, r3
     5aa:	46a2      	mov	sl, r4
     5ac:	46ab      	mov	fp, r5
     5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b0:	00001ef0 	.word	0x00001ef0
     5b4:	000004b1 	.word	0x000004b1

000005b8 <drawString>:
void drawString(short x, short y, char* str, short fg, short bg){
     5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ba:	b085      	sub	sp, #20
     5bc:	9102      	str	r1, [sp, #8]
     5be:	0017      	movs	r7, r2
     5c0:	9303      	str	r3, [sp, #12]
     5c2:	ab0a      	add	r3, sp, #40	; 0x28
     5c4:	2600      	movs	r6, #0
     5c6:	5f9e      	ldrsh	r6, [r3, r6]
    while(str[i]){
     5c8:	7812      	ldrb	r2, [r2, #0]
     5ca:	2a00      	cmp	r2, #0
     5cc:	d00d      	beq.n	5ea <drawString+0x32>
     5ce:	b284      	uxth	r4, r0
     5d0:	3701      	adds	r7, #1
        drawChar(x+5*i,y,str[i],fg,bg);
     5d2:	4d07      	ldr	r5, [pc, #28]	; (5f0 <drawString+0x38>)
     5d4:	b220      	sxth	r0, r4
     5d6:	9600      	str	r6, [sp, #0]
     5d8:	9b03      	ldr	r3, [sp, #12]
     5da:	9902      	ldr	r1, [sp, #8]
     5dc:	47a8      	blx	r5
    while(str[i]){
     5de:	783a      	ldrb	r2, [r7, #0]
     5e0:	3405      	adds	r4, #5
     5e2:	b2a4      	uxth	r4, r4
     5e4:	3701      	adds	r7, #1
     5e6:	2a00      	cmp	r2, #0
     5e8:	d1f4      	bne.n	5d4 <drawString+0x1c>
}
     5ea:	b005      	add	sp, #20
     5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00000511 	.word	0x00000511

000005f4 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
     5f4:	b570      	push	{r4, r5, r6, lr}
     5f6:	0006      	movs	r6, r0
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
     5f8:	23a0      	movs	r3, #160	; 0xa0
     5fa:	2280      	movs	r2, #128	; 0x80
     5fc:	2100      	movs	r1, #0
     5fe:	2000      	movs	r0, #0
     600:	4c05      	ldr	r4, [pc, #20]	; (618 <LCD_clearScreen+0x24>)
     602:	47a0      	blx	r4
     604:	24a0      	movs	r4, #160	; 0xa0
     606:	01e4      	lsls	r4, r4, #7
	for (i = 0;i < _GRAMSIZE; i++){
		LCD_data16(color);
     608:	4d04      	ldr	r5, [pc, #16]	; (61c <LCD_clearScreen+0x28>)
     60a:	0030      	movs	r0, r6
     60c:	47a8      	blx	r5
     60e:	3c01      	subs	r4, #1
	for (i = 0;i < _GRAMSIZE; i++){
     610:	2c00      	cmp	r4, #0
     612:	d1fa      	bne.n	60a <LCD_clearScreen+0x16>
	}
     614:	bd70      	pop	{r4, r5, r6, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000479 	.word	0x00000479
     61c:	00000261 	.word	0x00000261

00000620 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     620:	b5f0      	push	{r4, r5, r6, r7, lr}
     622:	46de      	mov	lr, fp
     624:	4657      	mov	r7, sl
     626:	464e      	mov	r6, r9
     628:	4645      	mov	r5, r8
     62a:	b5e0      	push	{r5, r6, r7, lr}
     62c:	b091      	sub	sp, #68	; 0x44
     62e:	0005      	movs	r5, r0
     630:	000c      	movs	r4, r1
     632:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     634:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     636:	0008      	movs	r0, r1
     638:	4bad      	ldr	r3, [pc, #692]	; (8f0 <usart_init+0x2d0>)
     63a:	4798      	blx	r3
     63c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     63e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     640:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     642:	07db      	lsls	r3, r3, #31
     644:	d506      	bpl.n	654 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     646:	b011      	add	sp, #68	; 0x44
     648:	bc3c      	pop	{r2, r3, r4, r5}
     64a:	4690      	mov	r8, r2
     64c:	4699      	mov	r9, r3
     64e:	46a2      	mov	sl, r4
     650:	46ab      	mov	fp, r5
     652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     654:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     656:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     658:	079b      	lsls	r3, r3, #30
     65a:	d4f4      	bmi.n	646 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     65c:	49a5      	ldr	r1, [pc, #660]	; (8f4 <usart_init+0x2d4>)
     65e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     660:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     662:	2301      	movs	r3, #1
     664:	40bb      	lsls	r3, r7
     666:	4303      	orrs	r3, r0
     668:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     66a:	a90f      	add	r1, sp, #60	; 0x3c
     66c:	272d      	movs	r7, #45	; 0x2d
     66e:	5df3      	ldrb	r3, [r6, r7]
     670:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     672:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     674:	b2d3      	uxtb	r3, r2
     676:	9302      	str	r3, [sp, #8]
     678:	0018      	movs	r0, r3
     67a:	4b9f      	ldr	r3, [pc, #636]	; (8f8 <usart_init+0x2d8>)
     67c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     67e:	9802      	ldr	r0, [sp, #8]
     680:	4b9e      	ldr	r3, [pc, #632]	; (8fc <usart_init+0x2dc>)
     682:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     684:	5df0      	ldrb	r0, [r6, r7]
     686:	2100      	movs	r1, #0
     688:	4b9d      	ldr	r3, [pc, #628]	; (900 <usart_init+0x2e0>)
     68a:	4798      	blx	r3
	module->character_size = config->character_size;
     68c:	7af3      	ldrb	r3, [r6, #11]
     68e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     690:	2324      	movs	r3, #36	; 0x24
     692:	5cf3      	ldrb	r3, [r6, r3]
     694:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     696:	2325      	movs	r3, #37	; 0x25
     698:	5cf3      	ldrb	r3, [r6, r3]
     69a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     69c:	7ef3      	ldrb	r3, [r6, #27]
     69e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     6a0:	7f33      	ldrb	r3, [r6, #28]
     6a2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6a4:	682b      	ldr	r3, [r5, #0]
     6a6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a8:	0018      	movs	r0, r3
     6aa:	4b91      	ldr	r3, [pc, #580]	; (8f0 <usart_init+0x2d0>)
     6ac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6ae:	300e      	adds	r0, #14
	uint16_t baud  = 0;
     6b0:	2200      	movs	r2, #0
     6b2:	230e      	movs	r3, #14
     6b4:	a906      	add	r1, sp, #24
     6b6:	468c      	mov	ip, r1
     6b8:	4463      	add	r3, ip
     6ba:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     6bc:	8a32      	ldrh	r2, [r6, #16]
     6be:	9202      	str	r2, [sp, #8]
     6c0:	2380      	movs	r3, #128	; 0x80
     6c2:	01db      	lsls	r3, r3, #7
     6c4:	429a      	cmp	r2, r3
     6c6:	d100      	bne.n	6ca <usart_init+0xaa>
     6c8:	e09f      	b.n	80a <usart_init+0x1ea>
     6ca:	d90f      	bls.n	6ec <usart_init+0xcc>
     6cc:	23c0      	movs	r3, #192	; 0xc0
     6ce:	01db      	lsls	r3, r3, #7
     6d0:	9a02      	ldr	r2, [sp, #8]
     6d2:	429a      	cmp	r2, r3
     6d4:	d100      	bne.n	6d8 <usart_init+0xb8>
     6d6:	e093      	b.n	800 <usart_init+0x1e0>
     6d8:	2380      	movs	r3, #128	; 0x80
     6da:	021b      	lsls	r3, r3, #8
     6dc:	429a      	cmp	r2, r3
     6de:	d000      	beq.n	6e2 <usart_init+0xc2>
     6e0:	e101      	b.n	8e6 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     6e2:	2303      	movs	r3, #3
     6e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6e6:	2300      	movs	r3, #0
     6e8:	9307      	str	r3, [sp, #28]
     6ea:	e008      	b.n	6fe <usart_init+0xde>
	switch (config->sample_rate) {
     6ec:	2380      	movs	r3, #128	; 0x80
     6ee:	019b      	lsls	r3, r3, #6
     6f0:	429a      	cmp	r2, r3
     6f2:	d000      	beq.n	6f6 <usart_init+0xd6>
     6f4:	e0f7      	b.n	8e6 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6f6:	2310      	movs	r3, #16
     6f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6fa:	3b0f      	subs	r3, #15
     6fc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     6fe:	6833      	ldr	r3, [r6, #0]
     700:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     702:	68f3      	ldr	r3, [r6, #12]
     704:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     706:	6973      	ldr	r3, [r6, #20]
     708:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     70a:	7e33      	ldrb	r3, [r6, #24]
     70c:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     70e:	2326      	movs	r3, #38	; 0x26
     710:	5cf3      	ldrb	r3, [r6, r3]
     712:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     714:	6873      	ldr	r3, [r6, #4]
     716:	4699      	mov	r9, r3
	switch (transfer_mode)
     718:	2b00      	cmp	r3, #0
     71a:	d100      	bne.n	71e <usart_init+0xfe>
     71c:	e0a1      	b.n	862 <usart_init+0x242>
     71e:	2380      	movs	r3, #128	; 0x80
     720:	055b      	lsls	r3, r3, #21
     722:	4599      	cmp	r9, r3
     724:	d100      	bne.n	728 <usart_init+0x108>
     726:	e085      	b.n	834 <usart_init+0x214>
	if(config->encoding_format_enable) {
     728:	7e73      	ldrb	r3, [r6, #25]
     72a:	2b00      	cmp	r3, #0
     72c:	d002      	beq.n	734 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     72e:	7eb3      	ldrb	r3, [r6, #26]
     730:	4642      	mov	r2, r8
     732:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     734:	682a      	ldr	r2, [r5, #0]
     736:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     738:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     73a:	2b00      	cmp	r3, #0
     73c:	d1fc      	bne.n	738 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     73e:	330e      	adds	r3, #14
     740:	aa06      	add	r2, sp, #24
     742:	4694      	mov	ip, r2
     744:	4463      	add	r3, ip
     746:	881b      	ldrh	r3, [r3, #0]
     748:	4642      	mov	r2, r8
     74a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     74c:	465b      	mov	r3, fp
     74e:	9a04      	ldr	r2, [sp, #16]
     750:	4313      	orrs	r3, r2
     752:	4652      	mov	r2, sl
     754:	4313      	orrs	r3, r2
     756:	464a      	mov	r2, r9
     758:	4313      	orrs	r3, r2
     75a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     75c:	9b05      	ldr	r3, [sp, #20]
     75e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     760:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     762:	9b03      	ldr	r3, [sp, #12]
     764:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     766:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     768:	2327      	movs	r3, #39	; 0x27
     76a:	5cf3      	ldrb	r3, [r6, r3]
     76c:	2b00      	cmp	r3, #0
     76e:	d101      	bne.n	774 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     770:	3304      	adds	r3, #4
     772:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     774:	7e73      	ldrb	r3, [r6, #25]
     776:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     778:	7f32      	ldrb	r2, [r6, #28]
     77a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     77c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     77e:	7f72      	ldrb	r2, [r6, #29]
     780:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     782:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     784:	2224      	movs	r2, #36	; 0x24
     786:	5cb2      	ldrb	r2, [r6, r2]
     788:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     78a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     78c:	2225      	movs	r2, #37	; 0x25
     78e:	5cb2      	ldrb	r2, [r6, r2]
     790:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     792:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     794:	7ab1      	ldrb	r1, [r6, #10]
     796:	7af2      	ldrb	r2, [r6, #11]
     798:	4311      	orrs	r1, r2
     79a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     79c:	8933      	ldrh	r3, [r6, #8]
     79e:	2bff      	cmp	r3, #255	; 0xff
     7a0:	d100      	bne.n	7a4 <usart_init+0x184>
     7a2:	e082      	b.n	8aa <usart_init+0x28a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	0452      	lsls	r2, r2, #17
     7a8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7aa:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     7ac:	232c      	movs	r3, #44	; 0x2c
     7ae:	5cf3      	ldrb	r3, [r6, r3]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d103      	bne.n	7bc <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7b4:	4b53      	ldr	r3, [pc, #332]	; (904 <usart_init+0x2e4>)
     7b6:	789b      	ldrb	r3, [r3, #2]
     7b8:	079b      	lsls	r3, r3, #30
     7ba:	d501      	bpl.n	7c0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7bc:	2380      	movs	r3, #128	; 0x80
     7be:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7c2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d1fc      	bne.n	7c2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     7c8:	4643      	mov	r3, r8
     7ca:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7cc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7ce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7d0:	2b00      	cmp	r3, #0
     7d2:	d1fc      	bne.n	7ce <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     7d4:	4643      	mov	r3, r8
     7d6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7d8:	ab0e      	add	r3, sp, #56	; 0x38
     7da:	2280      	movs	r2, #128	; 0x80
     7dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7de:	2200      	movs	r2, #0
     7e0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     7e2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     7e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     7e8:	930a      	str	r3, [sp, #40]	; 0x28
     7ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7ec:	930b      	str	r3, [sp, #44]	; 0x2c
     7ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     7f0:	930c      	str	r3, [sp, #48]	; 0x30
     7f2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     7f4:	9302      	str	r3, [sp, #8]
     7f6:	930d      	str	r3, [sp, #52]	; 0x34
     7f8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7fa:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7fc:	4e42      	ldr	r6, [pc, #264]	; (908 <usart_init+0x2e8>)
     7fe:	e063      	b.n	8c8 <usart_init+0x2a8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     800:	2308      	movs	r3, #8
     802:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     804:	3b07      	subs	r3, #7
     806:	9307      	str	r3, [sp, #28]
     808:	e779      	b.n	6fe <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     80a:	6833      	ldr	r3, [r6, #0]
     80c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     80e:	68f3      	ldr	r3, [r6, #12]
     810:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     812:	6973      	ldr	r3, [r6, #20]
     814:	469a      	mov	sl, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     816:	7e33      	ldrb	r3, [r6, #24]
     818:	9305      	str	r3, [sp, #20]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     81a:	2326      	movs	r3, #38	; 0x26
     81c:	5cf3      	ldrb	r3, [r6, r3]
     81e:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
     820:	6873      	ldr	r3, [r6, #4]
     822:	4699      	mov	r9, r3
	switch (transfer_mode)
     824:	2b00      	cmp	r3, #0
     826:	d018      	beq.n	85a <usart_init+0x23a>
     828:	2380      	movs	r3, #128	; 0x80
     82a:	055b      	lsls	r3, r3, #21
     82c:	4599      	cmp	r9, r3
     82e:	d001      	beq.n	834 <usart_init+0x214>
	enum status_code status_code = STATUS_OK;
     830:	2000      	movs	r0, #0
     832:	e025      	b.n	880 <usart_init+0x260>
			if (!config->use_external_clock) {
     834:	2327      	movs	r3, #39	; 0x27
     836:	5cf3      	ldrb	r3, [r6, r3]
     838:	2b00      	cmp	r3, #0
     83a:	d000      	beq.n	83e <usart_init+0x21e>
     83c:	e774      	b.n	728 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     83e:	6a33      	ldr	r3, [r6, #32]
     840:	001f      	movs	r7, r3
     842:	b2c0      	uxtb	r0, r0
     844:	4b31      	ldr	r3, [pc, #196]	; (90c <usart_init+0x2ec>)
     846:	4798      	blx	r3
     848:	0001      	movs	r1, r0
     84a:	220e      	movs	r2, #14
     84c:	ab06      	add	r3, sp, #24
     84e:	469c      	mov	ip, r3
     850:	4462      	add	r2, ip
     852:	0038      	movs	r0, r7
     854:	4b2e      	ldr	r3, [pc, #184]	; (910 <usart_init+0x2f0>)
     856:	4798      	blx	r3
     858:	e012      	b.n	880 <usart_init+0x260>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     85a:	2308      	movs	r3, #8
     85c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     85e:	2300      	movs	r3, #0
     860:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     862:	2327      	movs	r3, #39	; 0x27
     864:	5cf3      	ldrb	r3, [r6, r3]
     866:	2b00      	cmp	r3, #0
     868:	d00e      	beq.n	888 <usart_init+0x268>
				status_code =
     86a:	9b06      	ldr	r3, [sp, #24]
     86c:	9300      	str	r3, [sp, #0]
     86e:	9b07      	ldr	r3, [sp, #28]
     870:	220e      	movs	r2, #14
     872:	a906      	add	r1, sp, #24
     874:	468c      	mov	ip, r1
     876:	4462      	add	r2, ip
     878:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     87a:	6a30      	ldr	r0, [r6, #32]
     87c:	4f25      	ldr	r7, [pc, #148]	; (914 <usart_init+0x2f4>)
     87e:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     880:	2800      	cmp	r0, #0
     882:	d000      	beq.n	886 <usart_init+0x266>
     884:	e6df      	b.n	646 <usart_init+0x26>
     886:	e74f      	b.n	728 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     888:	6a33      	ldr	r3, [r6, #32]
     88a:	001f      	movs	r7, r3
     88c:	b2c0      	uxtb	r0, r0
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <usart_init+0x2ec>)
     890:	4798      	blx	r3
     892:	0001      	movs	r1, r0
				status_code =
     894:	9b06      	ldr	r3, [sp, #24]
     896:	9300      	str	r3, [sp, #0]
     898:	9b07      	ldr	r3, [sp, #28]
     89a:	220e      	movs	r2, #14
     89c:	a806      	add	r0, sp, #24
     89e:	4684      	mov	ip, r0
     8a0:	4462      	add	r2, ip
     8a2:	0038      	movs	r0, r7
     8a4:	4f1b      	ldr	r7, [pc, #108]	; (914 <usart_init+0x2f4>)
     8a6:	47b8      	blx	r7
     8a8:	e7ea      	b.n	880 <usart_init+0x260>
		if(config->lin_slave_enable) {
     8aa:	7ef3      	ldrb	r3, [r6, #27]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d100      	bne.n	8b2 <usart_init+0x292>
     8b0:	e77c      	b.n	7ac <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     8b2:	2380      	movs	r3, #128	; 0x80
     8b4:	04db      	lsls	r3, r3, #19
     8b6:	431f      	orrs	r7, r3
     8b8:	e778      	b.n	7ac <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8ba:	0020      	movs	r0, r4
     8bc:	4b16      	ldr	r3, [pc, #88]	; (918 <usart_init+0x2f8>)
     8be:	4798      	blx	r3
     8c0:	e007      	b.n	8d2 <usart_init+0x2b2>
     8c2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     8c4:	2f04      	cmp	r7, #4
     8c6:	d00c      	beq.n	8e2 <usart_init+0x2c2>
     8c8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8ca:	00bb      	lsls	r3, r7, #2
     8cc:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     8ce:	2800      	cmp	r0, #0
     8d0:	d0f3      	beq.n	8ba <usart_init+0x29a>
		if (current_pinmux != PINMUX_UNUSED) {
     8d2:	1c43      	adds	r3, r0, #1
     8d4:	d0f5      	beq.n	8c2 <usart_init+0x2a2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     8d6:	a90e      	add	r1, sp, #56	; 0x38
     8d8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     8da:	0c00      	lsrs	r0, r0, #16
     8dc:	b2c0      	uxtb	r0, r0
     8de:	47b0      	blx	r6
     8e0:	e7ef      	b.n	8c2 <usart_init+0x2a2>
	return status_code;
     8e2:	2000      	movs	r0, #0
     8e4:	e6af      	b.n	646 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8e6:	2310      	movs	r3, #16
     8e8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8ea:	2300      	movs	r3, #0
     8ec:	9307      	str	r3, [sp, #28]
     8ee:	e706      	b.n	6fe <usart_init+0xde>
     8f0:	00000d61 	.word	0x00000d61
     8f4:	40000400 	.word	0x40000400
     8f8:	0000188d 	.word	0x0000188d
     8fc:	00001801 	.word	0x00001801
     900:	00000c55 	.word	0x00000c55
     904:	41002000 	.word	0x41002000
     908:	00001985 	.word	0x00001985
     90c:	000018a9 	.word	0x000018a9
     910:	00000b97 	.word	0x00000b97
     914:	00000bc1 	.word	0x00000bc1
     918:	00000ca1 	.word	0x00000ca1

0000091c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     91c:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
     91e:	221c      	movs	r2, #28
	if (!(module->transmitter_enabled)) {
     920:	2b00      	cmp	r3, #0
     922:	d101      	bne.n	928 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     924:	0010      	movs	r0, r2
     926:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     928:	6803      	ldr	r3, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     92a:	7e18      	ldrb	r0, [r3, #24]
		return STATUS_BUSY;
     92c:	3a17      	subs	r2, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     92e:	07c0      	lsls	r0, r0, #31
     930:	d5f8      	bpl.n	924 <usart_write_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     932:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     934:	2a00      	cmp	r2, #0
     936:	d1fc      	bne.n	932 <usart_write_wait+0x16>
	usart_hw->DATA.reg = tx_data;
     938:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     93a:	2102      	movs	r1, #2
     93c:	7e1a      	ldrb	r2, [r3, #24]
     93e:	420a      	tst	r2, r1
     940:	d0fc      	beq.n	93c <usart_write_wait+0x20>
	return STATUS_OK;
     942:	2200      	movs	r2, #0
     944:	e7ee      	b.n	924 <usart_write_wait+0x8>

00000946 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     946:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     948:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     94a:	2a00      	cmp	r2, #0
     94c:	d101      	bne.n	952 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     94e:	0018      	movs	r0, r3
     950:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     954:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
     956:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     958:	0740      	lsls	r0, r0, #29
     95a:	d5f8      	bpl.n	94e <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     95c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     95e:	2b00      	cmp	r3, #0
     960:	d1fc      	bne.n	95c <usart_read_wait+0x16>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     962:	8b53      	ldrh	r3, [r2, #26]
     964:	b2db      	uxtb	r3, r3
	if (error_code) {
     966:	0698      	lsls	r0, r3, #26
     968:	d01d      	beq.n	9a6 <usart_read_wait+0x60>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     96a:	0798      	lsls	r0, r3, #30
     96c:	d503      	bpl.n	976 <usart_read_wait+0x30>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     96e:	2302      	movs	r3, #2
     970:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     972:	3318      	adds	r3, #24
     974:	e7eb      	b.n	94e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     976:	0758      	lsls	r0, r3, #29
     978:	d503      	bpl.n	982 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     97a:	2304      	movs	r3, #4
     97c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     97e:	331a      	adds	r3, #26
     980:	e7e5      	b.n	94e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     982:	07d8      	lsls	r0, r3, #31
     984:	d503      	bpl.n	98e <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     986:	2301      	movs	r3, #1
     988:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     98a:	3312      	adds	r3, #18
     98c:	e7df      	b.n	94e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     98e:	06d8      	lsls	r0, r3, #27
     990:	d503      	bpl.n	99a <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     992:	2310      	movs	r3, #16
     994:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     996:	3332      	adds	r3, #50	; 0x32
     998:	e7d9      	b.n	94e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     99a:	069b      	lsls	r3, r3, #26
     99c:	d503      	bpl.n	9a6 <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     99e:	2320      	movs	r3, #32
     9a0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     9a2:	3321      	adds	r3, #33	; 0x21
     9a4:	e7d3      	b.n	94e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     9a6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     9a8:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     9aa:	2300      	movs	r3, #0
     9ac:	e7cf      	b.n	94e <usart_read_wait+0x8>
	...

000009b0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	46ce      	mov	lr, r9
     9b4:	4647      	mov	r7, r8
     9b6:	b580      	push	{r7, lr}
     9b8:	b083      	sub	sp, #12
     9ba:	0005      	movs	r5, r0
     9bc:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9be:	2017      	movs	r0, #23
	if (length == 0) {
     9c0:	2a00      	cmp	r2, #0
     9c2:	d104      	bne.n	9ce <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     9c4:	b003      	add	sp, #12
     9c6:	bc0c      	pop	{r2, r3}
     9c8:	4690      	mov	r8, r2
     9ca:	4699      	mov	r9, r3
     9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     9ce:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     9d0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     9d2:	2b00      	cmp	r3, #0
     9d4:	d0f6      	beq.n	9c4 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9d6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9da:	2b00      	cmp	r3, #0
     9dc:	d1fc      	bne.n	9d8 <usart_write_buffer_wait+0x28>
	while (length--) {
     9de:	3a01      	subs	r2, #1
     9e0:	b293      	uxth	r3, r2
     9e2:	4699      	mov	r9, r3
     9e4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     9e6:	2701      	movs	r7, #1
	while (length--) {
     9e8:	4b1f      	ldr	r3, [pc, #124]	; (a68 <usart_write_buffer_wait+0xb8>)
     9ea:	4698      	mov	r8, r3
     9ec:	e011      	b.n	a12 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     9ee:	1c73      	adds	r3, r6, #1
     9f0:	b29b      	uxth	r3, r3
     9f2:	9a01      	ldr	r2, [sp, #4]
     9f4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9f6:	796a      	ldrb	r2, [r5, #5]
     9f8:	2a01      	cmp	r2, #1
     9fa:	d017      	beq.n	a2c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     9fc:	b289      	uxth	r1, r1
     9fe:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     a00:	0028      	movs	r0, r5
     a02:	4b1a      	ldr	r3, [pc, #104]	; (a6c <usart_write_buffer_wait+0xbc>)
     a04:	4798      	blx	r3
	while (length--) {
     a06:	464b      	mov	r3, r9
     a08:	3b01      	subs	r3, #1
     a0a:	b29b      	uxth	r3, r3
     a0c:	4699      	mov	r9, r3
     a0e:	4543      	cmp	r3, r8
     a10:	d013      	beq.n	a3a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a12:	7e23      	ldrb	r3, [r4, #24]
     a14:	423b      	tst	r3, r7
     a16:	d1ea      	bne.n	9ee <usart_write_buffer_wait+0x3e>
     a18:	4b13      	ldr	r3, [pc, #76]	; (a68 <usart_write_buffer_wait+0xb8>)
     a1a:	7e22      	ldrb	r2, [r4, #24]
     a1c:	423a      	tst	r2, r7
     a1e:	d1e6      	bne.n	9ee <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     a20:	2b01      	cmp	r3, #1
     a22:	d019      	beq.n	a58 <usart_write_buffer_wait+0xa8>
     a24:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a26:	2b00      	cmp	r3, #0
     a28:	d1f7      	bne.n	a1a <usart_write_buffer_wait+0x6a>
     a2a:	e7e0      	b.n	9ee <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     a2c:	3602      	adds	r6, #2
     a2e:	b2b6      	uxth	r6, r6
     a30:	9a01      	ldr	r2, [sp, #4]
     a32:	5cd3      	ldrb	r3, [r2, r3]
     a34:	021b      	lsls	r3, r3, #8
     a36:	4319      	orrs	r1, r3
     a38:	e7e2      	b.n	a00 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a3a:	7e23      	ldrb	r3, [r4, #24]
     a3c:	079b      	lsls	r3, r3, #30
     a3e:	d40d      	bmi.n	a5c <usart_write_buffer_wait+0xac>
     a40:	4b09      	ldr	r3, [pc, #36]	; (a68 <usart_write_buffer_wait+0xb8>)
     a42:	2102      	movs	r1, #2
     a44:	7e22      	ldrb	r2, [r4, #24]
     a46:	420a      	tst	r2, r1
     a48:	d10a      	bne.n	a60 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     a4a:	2b01      	cmp	r3, #1
     a4c:	d00a      	beq.n	a64 <usart_write_buffer_wait+0xb4>
     a4e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a50:	2b00      	cmp	r3, #0
     a52:	d1f7      	bne.n	a44 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     a54:	2000      	movs	r0, #0
     a56:	e7b5      	b.n	9c4 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     a58:	2012      	movs	r0, #18
     a5a:	e7b3      	b.n	9c4 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     a5c:	2000      	movs	r0, #0
     a5e:	e7b1      	b.n	9c4 <usart_write_buffer_wait+0x14>
     a60:	2000      	movs	r0, #0
     a62:	e7af      	b.n	9c4 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     a64:	2012      	movs	r0, #18
     a66:	e7ad      	b.n	9c4 <usart_write_buffer_wait+0x14>
     a68:	0000ffff 	.word	0x0000ffff
     a6c:	0000091d 	.word	0x0000091d

00000a70 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     a70:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     a72:	2000      	movs	r0, #0
     a74:	4b08      	ldr	r3, [pc, #32]	; (a98 <delay_init+0x28>)
     a76:	4798      	blx	r3
     a78:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     a7a:	4c08      	ldr	r4, [pc, #32]	; (a9c <delay_init+0x2c>)
     a7c:	21fa      	movs	r1, #250	; 0xfa
     a7e:	0089      	lsls	r1, r1, #2
     a80:	47a0      	blx	r4
     a82:	4b07      	ldr	r3, [pc, #28]	; (aa0 <delay_init+0x30>)
     a84:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     a86:	4907      	ldr	r1, [pc, #28]	; (aa4 <delay_init+0x34>)
     a88:	0028      	movs	r0, r5
     a8a:	47a0      	blx	r4
     a8c:	4b06      	ldr	r3, [pc, #24]	; (aa8 <delay_init+0x38>)
     a8e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     a90:	2205      	movs	r2, #5
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <delay_init+0x3c>)
     a94:	601a      	str	r2, [r3, #0]
}
     a96:	bd70      	pop	{r4, r5, r6, pc}
     a98:	00001775 	.word	0x00001775
     a9c:	00001d2d 	.word	0x00001d2d
     aa0:	20000000 	.word	0x20000000
     aa4:	000f4240 	.word	0x000f4240
     aa8:	20000004 	.word	0x20000004
     aac:	e000e010 	.word	0xe000e010

00000ab0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     ab0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     ab2:	4b08      	ldr	r3, [pc, #32]	; (ad4 <delay_cycles_ms+0x24>)
     ab4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     ab6:	4a08      	ldr	r2, [pc, #32]	; (ad8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     ab8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     aba:	2180      	movs	r1, #128	; 0x80
     abc:	0249      	lsls	r1, r1, #9
	while (n--) {
     abe:	3801      	subs	r0, #1
     ac0:	d307      	bcc.n	ad2 <delay_cycles_ms+0x22>
	if (n > 0) {
     ac2:	2c00      	cmp	r4, #0
     ac4:	d0fb      	beq.n	abe <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     ac6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     ac8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     aca:	6813      	ldr	r3, [r2, #0]
     acc:	420b      	tst	r3, r1
     ace:	d0fc      	beq.n	aca <delay_cycles_ms+0x1a>
     ad0:	e7f5      	b.n	abe <delay_cycles_ms+0xe>
	}
}
     ad2:	bd30      	pop	{r4, r5, pc}
     ad4:	20000000 	.word	0x20000000
     ad8:	e000e010 	.word	0xe000e010

00000adc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ade:	46de      	mov	lr, fp
     ae0:	4657      	mov	r7, sl
     ae2:	464e      	mov	r6, r9
     ae4:	4645      	mov	r5, r8
     ae6:	b5e0      	push	{r5, r6, r7, lr}
     ae8:	b087      	sub	sp, #28
     aea:	4680      	mov	r8, r0
     aec:	9104      	str	r1, [sp, #16]
     aee:	0016      	movs	r6, r2
     af0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     af2:	2200      	movs	r2, #0
     af4:	2300      	movs	r3, #0
     af6:	2100      	movs	r1, #0
     af8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     afa:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     afc:	2001      	movs	r0, #1
     afe:	0021      	movs	r1, r4
     b00:	9600      	str	r6, [sp, #0]
     b02:	9701      	str	r7, [sp, #4]
     b04:	465c      	mov	r4, fp
     b06:	9403      	str	r4, [sp, #12]
     b08:	4644      	mov	r4, r8
     b0a:	9405      	str	r4, [sp, #20]
     b0c:	e013      	b.n	b36 <long_division+0x5a>
     b0e:	2420      	movs	r4, #32
     b10:	1a64      	subs	r4, r4, r1
     b12:	0005      	movs	r5, r0
     b14:	40e5      	lsrs	r5, r4
     b16:	46a8      	mov	r8, r5
     b18:	e014      	b.n	b44 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     b1a:	9c00      	ldr	r4, [sp, #0]
     b1c:	9d01      	ldr	r5, [sp, #4]
     b1e:	1b12      	subs	r2, r2, r4
     b20:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b22:	465c      	mov	r4, fp
     b24:	464d      	mov	r5, r9
     b26:	432c      	orrs	r4, r5
     b28:	46a3      	mov	fp, r4
     b2a:	9c03      	ldr	r4, [sp, #12]
     b2c:	4645      	mov	r5, r8
     b2e:	432c      	orrs	r4, r5
     b30:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     b32:	3901      	subs	r1, #1
     b34:	d325      	bcc.n	b82 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     b36:	2420      	movs	r4, #32
     b38:	4264      	negs	r4, r4
     b3a:	190c      	adds	r4, r1, r4
     b3c:	d4e7      	bmi.n	b0e <long_division+0x32>
     b3e:	0005      	movs	r5, r0
     b40:	40a5      	lsls	r5, r4
     b42:	46a8      	mov	r8, r5
     b44:	0004      	movs	r4, r0
     b46:	408c      	lsls	r4, r1
     b48:	46a1      	mov	r9, r4
		r = r << 1;
     b4a:	1892      	adds	r2, r2, r2
     b4c:	415b      	adcs	r3, r3
     b4e:	0014      	movs	r4, r2
     b50:	001d      	movs	r5, r3
		if (n & bit_shift) {
     b52:	9e05      	ldr	r6, [sp, #20]
     b54:	464f      	mov	r7, r9
     b56:	403e      	ands	r6, r7
     b58:	46b4      	mov	ip, r6
     b5a:	9e04      	ldr	r6, [sp, #16]
     b5c:	4647      	mov	r7, r8
     b5e:	403e      	ands	r6, r7
     b60:	46b2      	mov	sl, r6
     b62:	4666      	mov	r6, ip
     b64:	4657      	mov	r7, sl
     b66:	433e      	orrs	r6, r7
     b68:	d003      	beq.n	b72 <long_division+0x96>
			r |= 0x01;
     b6a:	0006      	movs	r6, r0
     b6c:	4326      	orrs	r6, r4
     b6e:	0032      	movs	r2, r6
     b70:	002b      	movs	r3, r5
		if (r >= d) {
     b72:	9c00      	ldr	r4, [sp, #0]
     b74:	9d01      	ldr	r5, [sp, #4]
     b76:	429d      	cmp	r5, r3
     b78:	d8db      	bhi.n	b32 <long_division+0x56>
     b7a:	d1ce      	bne.n	b1a <long_division+0x3e>
     b7c:	4294      	cmp	r4, r2
     b7e:	d8d8      	bhi.n	b32 <long_division+0x56>
     b80:	e7cb      	b.n	b1a <long_division+0x3e>
     b82:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     b84:	4658      	mov	r0, fp
     b86:	0019      	movs	r1, r3
     b88:	b007      	add	sp, #28
     b8a:	bc3c      	pop	{r2, r3, r4, r5}
     b8c:	4690      	mov	r8, r2
     b8e:	4699      	mov	r9, r3
     b90:	46a2      	mov	sl, r4
     b92:	46ab      	mov	fp, r5
     b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b96 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b96:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b98:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b9a:	2340      	movs	r3, #64	; 0x40
     b9c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b9e:	4281      	cmp	r1, r0
     ba0:	d202      	bcs.n	ba8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     ba2:	0018      	movs	r0, r3
     ba4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ba6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ba8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     baa:	1c63      	adds	r3, r4, #1
     bac:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     bae:	4288      	cmp	r0, r1
     bb0:	d9f9      	bls.n	ba6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bb2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     bb4:	2cff      	cmp	r4, #255	; 0xff
     bb6:	d8f4      	bhi.n	ba2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     bb8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     bba:	2300      	movs	r3, #0
     bbc:	e7f1      	b.n	ba2 <_sercom_get_sync_baud_val+0xc>
	...

00000bc0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	b083      	sub	sp, #12
     bc4:	000f      	movs	r7, r1
     bc6:	0016      	movs	r6, r2
     bc8:	aa08      	add	r2, sp, #32
     bca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     bcc:	0004      	movs	r4, r0
     bce:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bd0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     bd2:	42bc      	cmp	r4, r7
     bd4:	d902      	bls.n	bdc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     bd6:	0010      	movs	r0, r2
     bd8:	b003      	add	sp, #12
     bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     bdc:	2b00      	cmp	r3, #0
     bde:	d114      	bne.n	c0a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     be0:	0002      	movs	r2, r0
     be2:	0008      	movs	r0, r1
     be4:	2100      	movs	r1, #0
     be6:	4c19      	ldr	r4, [pc, #100]	; (c4c <_sercom_get_async_baud_val+0x8c>)
     be8:	47a0      	blx	r4
     bea:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     bec:	003a      	movs	r2, r7
     bee:	2300      	movs	r3, #0
     bf0:	2000      	movs	r0, #0
     bf2:	4c17      	ldr	r4, [pc, #92]	; (c50 <_sercom_get_async_baud_val+0x90>)
     bf4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     bf6:	2200      	movs	r2, #0
     bf8:	2301      	movs	r3, #1
     bfa:	1a12      	subs	r2, r2, r0
     bfc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     bfe:	0c12      	lsrs	r2, r2, #16
     c00:	041b      	lsls	r3, r3, #16
     c02:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     c04:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     c06:	2200      	movs	r2, #0
     c08:	e7e5      	b.n	bd6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     c0a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c0c:	2b01      	cmp	r3, #1
     c0e:	d1f9      	bne.n	c04 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     c10:	000a      	movs	r2, r1
     c12:	2300      	movs	r3, #0
     c14:	2100      	movs	r1, #0
     c16:	4c0d      	ldr	r4, [pc, #52]	; (c4c <_sercom_get_async_baud_val+0x8c>)
     c18:	47a0      	blx	r4
     c1a:	0002      	movs	r2, r0
     c1c:	000b      	movs	r3, r1
     c1e:	9200      	str	r2, [sp, #0]
     c20:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     c22:	0038      	movs	r0, r7
     c24:	2100      	movs	r1, #0
     c26:	4c0a      	ldr	r4, [pc, #40]	; (c50 <_sercom_get_async_baud_val+0x90>)
     c28:	47a0      	blx	r4
     c2a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     c2c:	2380      	movs	r3, #128	; 0x80
     c2e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c30:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     c32:	4298      	cmp	r0, r3
     c34:	d8cf      	bhi.n	bd6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     c36:	0f79      	lsrs	r1, r7, #29
     c38:	00f8      	lsls	r0, r7, #3
     c3a:	9a00      	ldr	r2, [sp, #0]
     c3c:	9b01      	ldr	r3, [sp, #4]
     c3e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     c40:	00ea      	lsls	r2, r5, #3
     c42:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     c44:	b2d2      	uxtb	r2, r2
     c46:	0352      	lsls	r2, r2, #13
     c48:	432a      	orrs	r2, r5
     c4a:	e7db      	b.n	c04 <_sercom_get_async_baud_val+0x44>
     c4c:	00001e45 	.word	0x00001e45
     c50:	00000add 	.word	0x00000add

00000c54 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c54:	b510      	push	{r4, lr}
     c56:	b082      	sub	sp, #8
     c58:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c5a:	4b0e      	ldr	r3, [pc, #56]	; (c94 <sercom_set_gclk_generator+0x40>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	2b00      	cmp	r3, #0
     c60:	d007      	beq.n	c72 <sercom_set_gclk_generator+0x1e>
     c62:	2900      	cmp	r1, #0
     c64:	d105      	bne.n	c72 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <sercom_set_gclk_generator+0x40>)
     c68:	785b      	ldrb	r3, [r3, #1]
     c6a:	4283      	cmp	r3, r0
     c6c:	d010      	beq.n	c90 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c6e:	201d      	movs	r0, #29
     c70:	e00c      	b.n	c8c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c72:	a901      	add	r1, sp, #4
     c74:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c76:	200d      	movs	r0, #13
     c78:	4b07      	ldr	r3, [pc, #28]	; (c98 <sercom_set_gclk_generator+0x44>)
     c7a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c7c:	200d      	movs	r0, #13
     c7e:	4b07      	ldr	r3, [pc, #28]	; (c9c <sercom_set_gclk_generator+0x48>)
     c80:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c82:	4b04      	ldr	r3, [pc, #16]	; (c94 <sercom_set_gclk_generator+0x40>)
     c84:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c86:	2201      	movs	r2, #1
     c88:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c8a:	2000      	movs	r0, #0
}
     c8c:	b002      	add	sp, #8
     c8e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c90:	2000      	movs	r0, #0
     c92:	e7fb      	b.n	c8c <sercom_set_gclk_generator+0x38>
     c94:	20000028 	.word	0x20000028
     c98:	0000188d 	.word	0x0000188d
     c9c:	00001801 	.word	0x00001801

00000ca0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ca0:	4b20      	ldr	r3, [pc, #128]	; (d24 <_sercom_get_default_pad+0x84>)
     ca2:	4298      	cmp	r0, r3
     ca4:	d017      	beq.n	cd6 <_sercom_get_default_pad+0x36>
     ca6:	4b20      	ldr	r3, [pc, #128]	; (d28 <_sercom_get_default_pad+0x88>)
     ca8:	4298      	cmp	r0, r3
     caa:	d024      	beq.n	cf6 <_sercom_get_default_pad+0x56>
     cac:	4b1f      	ldr	r3, [pc, #124]	; (d2c <_sercom_get_default_pad+0x8c>)
     cae:	4298      	cmp	r0, r3
     cb0:	d001      	beq.n	cb6 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     cb2:	2000      	movs	r0, #0
}
     cb4:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cb6:	2901      	cmp	r1, #1
     cb8:	d007      	beq.n	cca <_sercom_get_default_pad+0x2a>
     cba:	2900      	cmp	r1, #0
     cbc:	d02b      	beq.n	d16 <_sercom_get_default_pad+0x76>
     cbe:	2902      	cmp	r1, #2
     cc0:	d005      	beq.n	cce <_sercom_get_default_pad+0x2e>
     cc2:	2903      	cmp	r1, #3
     cc4:	d005      	beq.n	cd2 <_sercom_get_default_pad+0x32>
	return 0;
     cc6:	2000      	movs	r0, #0
     cc8:	e7f4      	b.n	cb4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cca:	4819      	ldr	r0, [pc, #100]	; (d30 <_sercom_get_default_pad+0x90>)
     ccc:	e7f2      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cce:	4819      	ldr	r0, [pc, #100]	; (d34 <_sercom_get_default_pad+0x94>)
     cd0:	e7f0      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cd2:	4819      	ldr	r0, [pc, #100]	; (d38 <_sercom_get_default_pad+0x98>)
     cd4:	e7ee      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cd6:	2901      	cmp	r1, #1
     cd8:	d007      	beq.n	cea <_sercom_get_default_pad+0x4a>
     cda:	2900      	cmp	r1, #0
     cdc:	d01d      	beq.n	d1a <_sercom_get_default_pad+0x7a>
     cde:	2902      	cmp	r1, #2
     ce0:	d005      	beq.n	cee <_sercom_get_default_pad+0x4e>
     ce2:	2903      	cmp	r1, #3
     ce4:	d005      	beq.n	cf2 <_sercom_get_default_pad+0x52>
	return 0;
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cea:	4814      	ldr	r0, [pc, #80]	; (d3c <_sercom_get_default_pad+0x9c>)
     cec:	e7e2      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cee:	4814      	ldr	r0, [pc, #80]	; (d40 <_sercom_get_default_pad+0xa0>)
     cf0:	e7e0      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cf2:	4814      	ldr	r0, [pc, #80]	; (d44 <_sercom_get_default_pad+0xa4>)
     cf4:	e7de      	b.n	cb4 <_sercom_get_default_pad+0x14>
     cf6:	2901      	cmp	r1, #1
     cf8:	d007      	beq.n	d0a <_sercom_get_default_pad+0x6a>
     cfa:	2900      	cmp	r1, #0
     cfc:	d00f      	beq.n	d1e <_sercom_get_default_pad+0x7e>
     cfe:	2902      	cmp	r1, #2
     d00:	d005      	beq.n	d0e <_sercom_get_default_pad+0x6e>
     d02:	2903      	cmp	r1, #3
     d04:	d005      	beq.n	d12 <_sercom_get_default_pad+0x72>
	return 0;
     d06:	2000      	movs	r0, #0
     d08:	e7d4      	b.n	cb4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d0a:	480f      	ldr	r0, [pc, #60]	; (d48 <_sercom_get_default_pad+0xa8>)
     d0c:	e7d2      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d0e:	480f      	ldr	r0, [pc, #60]	; (d4c <_sercom_get_default_pad+0xac>)
     d10:	e7d0      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d12:	480f      	ldr	r0, [pc, #60]	; (d50 <_sercom_get_default_pad+0xb0>)
     d14:	e7ce      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d16:	480f      	ldr	r0, [pc, #60]	; (d54 <_sercom_get_default_pad+0xb4>)
     d18:	e7cc      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d1a:	480f      	ldr	r0, [pc, #60]	; (d58 <_sercom_get_default_pad+0xb8>)
     d1c:	e7ca      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d1e:	480f      	ldr	r0, [pc, #60]	; (d5c <_sercom_get_default_pad+0xbc>)
     d20:	e7c8      	b.n	cb4 <_sercom_get_default_pad+0x14>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	42000c00 	.word	0x42000c00
     d28:	42001000 	.word	0x42001000
     d2c:	42000800 	.word	0x42000800
     d30:	00050003 	.word	0x00050003
     d34:	00060003 	.word	0x00060003
     d38:	00070003 	.word	0x00070003
     d3c:	00170002 	.word	0x00170002
     d40:	001e0003 	.word	0x001e0003
     d44:	001f0003 	.word	0x001f0003
     d48:	00170003 	.word	0x00170003
     d4c:	00100003 	.word	0x00100003
     d50:	00190003 	.word	0x00190003
     d54:	00040003 	.word	0x00040003
     d58:	00160002 	.word	0x00160002
     d5c:	00160003 	.word	0x00160003

00000d60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d60:	b530      	push	{r4, r5, lr}
     d62:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d64:	aa01      	add	r2, sp, #4
     d66:	4b0b      	ldr	r3, [pc, #44]	; (d94 <_sercom_get_sercom_inst_index+0x34>)
     d68:	cb32      	ldmia	r3!, {r1, r4, r5}
     d6a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d6c:	0003      	movs	r3, r0
     d6e:	9a01      	ldr	r2, [sp, #4]
     d70:	4282      	cmp	r2, r0
     d72:	d00c      	beq.n	d8e <_sercom_get_sercom_inst_index+0x2e>
     d74:	9a02      	ldr	r2, [sp, #8]
     d76:	4282      	cmp	r2, r0
     d78:	d007      	beq.n	d8a <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d7a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d7c:	9a03      	ldr	r2, [sp, #12]
     d7e:	429a      	cmp	r2, r3
     d80:	d001      	beq.n	d86 <_sercom_get_sercom_inst_index+0x26>
}
     d82:	b005      	add	sp, #20
     d84:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d86:	3002      	adds	r0, #2
     d88:	e002      	b.n	d90 <_sercom_get_sercom_inst_index+0x30>
     d8a:	2001      	movs	r0, #1
     d8c:	e000      	b.n	d90 <_sercom_get_sercom_inst_index+0x30>
     d8e:	2000      	movs	r0, #0
			return i;
     d90:	b2c0      	uxtb	r0, r0
     d92:	e7f6      	b.n	d82 <_sercom_get_sercom_inst_index+0x22>
     d94:	000020d0 	.word	0x000020d0

00000d98 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d98:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9a:	46d6      	mov	lr, sl
     d9c:	464f      	mov	r7, r9
     d9e:	b580      	push	{r7, lr}
     da0:	b08b      	sub	sp, #44	; 0x2c
     da2:	4681      	mov	r9, r0
     da4:	000f      	movs	r7, r1
     da6:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     da8:	0003      	movs	r3, r0
     daa:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     dac:	680b      	ldr	r3, [r1, #0]
     dae:	079b      	lsls	r3, r3, #30
     db0:	d409      	bmi.n	dc6 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     db2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     db4:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     db6:	07db      	lsls	r3, r3, #31
     db8:	d400      	bmi.n	dbc <spi_init+0x24>
     dba:	e0b1      	b.n	f20 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     dbc:	b00b      	add	sp, #44	; 0x2c
     dbe:	bc0c      	pop	{r2, r3}
     dc0:	4691      	mov	r9, r2
     dc2:	469a      	mov	sl, r3
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     dc6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     dc8:	9305      	str	r3, [sp, #20]
     dca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     dcc:	9306      	str	r3, [sp, #24]
     dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
     dd0:	9307      	str	r3, [sp, #28]
     dd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
     dd4:	9308      	str	r3, [sp, #32]
     dd6:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dd8:	ab05      	add	r3, sp, #20
     dda:	9301      	str	r3, [sp, #4]
     ddc:	e00a      	b.n	df4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dde:	0038      	movs	r0, r7
     de0:	4baf      	ldr	r3, [pc, #700]	; (10a0 <spi_init+0x308>)
     de2:	4798      	blx	r3
     de4:	e00c      	b.n	e00 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     de6:	230f      	movs	r3, #15
     de8:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     dea:	4281      	cmp	r1, r0
     dec:	d12d      	bne.n	e4a <spi_init+0xb2>
     dee:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     df0:	2e04      	cmp	r6, #4
     df2:	d02f      	beq.n	e54 <spi_init+0xbc>
     df4:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     df6:	00b3      	lsls	r3, r6, #2
     df8:	9a01      	ldr	r2, [sp, #4]
     dfa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     dfc:	2800      	cmp	r0, #0
     dfe:	d0ee      	beq.n	dde <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     e00:	1c43      	adds	r3, r0, #1
     e02:	d0f4      	beq.n	dee <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     e04:	0401      	lsls	r1, r0, #16
     e06:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     e08:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     e0a:	b2c3      	uxtb	r3, r0
     e0c:	469c      	mov	ip, r3
		return NULL;
     e0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e10:	0602      	lsls	r2, r0, #24
     e12:	d405      	bmi.n	e20 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     e14:	4663      	mov	r3, ip
     e16:	095b      	lsrs	r3, r3, #5
     e18:	01db      	lsls	r3, r3, #7
     e1a:	4aa2      	ldr	r2, [pc, #648]	; (10a4 <spi_init+0x30c>)
     e1c:	4692      	mov	sl, r2
     e1e:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     e20:	221f      	movs	r2, #31
     e22:	4660      	mov	r0, ip
     e24:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     e26:	1898      	adds	r0, r3, r2
     e28:	3040      	adds	r0, #64	; 0x40
     e2a:	7800      	ldrb	r0, [r0, #0]
     e2c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     e2e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     e30:	4655      	mov	r5, sl
     e32:	07ed      	lsls	r5, r5, #31
     e34:	d5d9      	bpl.n	dea <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     e36:	0852      	lsrs	r2, r2, #1
     e38:	189b      	adds	r3, r3, r2
     e3a:	3330      	adds	r3, #48	; 0x30
     e3c:	7818      	ldrb	r0, [r3, #0]
     e3e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     e40:	4663      	mov	r3, ip
     e42:	07db      	lsls	r3, r3, #31
     e44:	d5cf      	bpl.n	de6 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     e46:	0900      	lsrs	r0, r0, #4
     e48:	e7cf      	b.n	dea <spi_init+0x52>
			module->hw = NULL;
     e4a:	2300      	movs	r3, #0
     e4c:	464a      	mov	r2, r9
     e4e:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     e50:	201c      	movs	r0, #28
     e52:	e7b3      	b.n	dbc <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     e54:	200d      	movs	r0, #13
     e56:	4b94      	ldr	r3, [pc, #592]	; (10a8 <spi_init+0x310>)
     e58:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     e5a:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     e5c:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     e5e:	2a01      	cmp	r2, #1
     e60:	d016      	beq.n	e90 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
     e62:	7821      	ldrb	r1, [r4, #0]
     e64:	2900      	cmp	r1, #0
     e66:	d127      	bne.n	eb8 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
     e68:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e6a:	7fe2      	ldrb	r2, [r4, #31]
     e6c:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     e6e:	7fa0      	ldrb	r0, [r4, #30]
     e70:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     e72:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     e74:	429a      	cmp	r2, r3
     e76:	d1a1      	bne.n	dbc <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     e78:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
     e7a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     e7c:	3004      	adds	r0, #4
     e7e:	5c20      	ldrb	r0, [r4, r0]
     e80:	2800      	cmp	r0, #0
     e82:	d001      	beq.n	e88 <spi_init+0xf0>
     e84:	2040      	movs	r0, #64	; 0x40
     e86:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     e88:	2008      	movs	r0, #8
     e8a:	4303      	orrs	r3, r0
     e8c:	431d      	orrs	r5, r3
     e8e:	e014      	b.n	eba <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
     e90:	aa04      	add	r2, sp, #16
     e92:	0001      	movs	r1, r0
     e94:	69a0      	ldr	r0, [r4, #24]
     e96:	4b85      	ldr	r3, [pc, #532]	; (10ac <spi_init+0x314>)
     e98:	4798      	blx	r3
     e9a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     e9c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     e9e:	2b00      	cmp	r3, #0
     ea0:	d000      	beq.n	ea4 <spi_init+0x10c>
     ea2:	e78b      	b.n	dbc <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     ea4:	7b3b      	ldrb	r3, [r7, #12]
     ea6:	b2db      	uxtb	r3, r3
     ea8:	aa04      	add	r2, sp, #16
     eaa:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     eac:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     eae:	429a      	cmp	r2, r3
     eb0:	d000      	beq.n	eb4 <spi_init+0x11c>
     eb2:	e783      	b.n	dbc <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     eb4:	350c      	adds	r5, #12
     eb6:	e7d4      	b.n	e62 <spi_init+0xca>
	uint32_t ctrlb = 0;
     eb8:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     eba:	6863      	ldr	r3, [r4, #4]
     ebc:	68a0      	ldr	r0, [r4, #8]
     ebe:	4303      	orrs	r3, r0
     ec0:	68e0      	ldr	r0, [r4, #12]
     ec2:	4303      	orrs	r3, r0
     ec4:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     ec6:	7c20      	ldrb	r0, [r4, #16]
     ec8:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     eca:	7c60      	ldrb	r0, [r4, #17]
     ecc:	2800      	cmp	r0, #0
     ece:	d001      	beq.n	ed4 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ed0:	2080      	movs	r0, #128	; 0x80
     ed2:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     ed4:	7ca0      	ldrb	r0, [r4, #18]
     ed6:	2800      	cmp	r0, #0
     ed8:	d002      	beq.n	ee0 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     eda:	2080      	movs	r0, #128	; 0x80
     edc:	0280      	lsls	r0, r0, #10
     ede:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
     ee0:	7ce0      	ldrb	r0, [r4, #19]
     ee2:	2800      	cmp	r0, #0
     ee4:	d002      	beq.n	eec <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ee6:	2080      	movs	r0, #128	; 0x80
     ee8:	0080      	lsls	r0, r0, #2
     eea:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
     eec:	7d20      	ldrb	r0, [r4, #20]
     eee:	2800      	cmp	r0, #0
     ef0:	d002      	beq.n	ef8 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ef2:	2080      	movs	r0, #128	; 0x80
     ef4:	0180      	lsls	r0, r0, #6
     ef6:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     ef8:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     efa:	2502      	movs	r5, #2
     efc:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     efe:	4283      	cmp	r3, r0
     f00:	d004      	beq.n	f0c <spi_init+0x174>
	module->hw = NULL;
     f02:	2300      	movs	r3, #0
     f04:	464a      	mov	r2, r9
     f06:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     f08:	201c      	movs	r0, #28
     f0a:	e757      	b.n	dbc <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     f0c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     f0e:	4293      	cmp	r3, r2
     f10:	d1f7      	bne.n	f02 <spi_init+0x16a>
		module->mode           = config->mode;
     f12:	464b      	mov	r3, r9
     f14:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     f16:	7c23      	ldrb	r3, [r4, #16]
     f18:	464a      	mov	r2, r9
     f1a:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     f1c:	2000      	movs	r0, #0
     f1e:	e74d      	b.n	dbc <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f20:	0008      	movs	r0, r1
     f22:	4b63      	ldr	r3, [pc, #396]	; (10b0 <spi_init+0x318>)
     f24:	4798      	blx	r3
     f26:	4a63      	ldr	r2, [pc, #396]	; (10b4 <spi_init+0x31c>)
     f28:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f2a:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f2c:	2301      	movs	r3, #1
     f2e:	40ab      	lsls	r3, r5
     f30:	430b      	orrs	r3, r1
     f32:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f34:	a909      	add	r1, sp, #36	; 0x24
     f36:	2624      	movs	r6, #36	; 0x24
     f38:	5da3      	ldrb	r3, [r4, r6]
     f3a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f3c:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f3e:	b2c5      	uxtb	r5, r0
     f40:	0028      	movs	r0, r5
     f42:	4b5d      	ldr	r3, [pc, #372]	; (10b8 <spi_init+0x320>)
     f44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f46:	0028      	movs	r0, r5
     f48:	4b5c      	ldr	r3, [pc, #368]	; (10bc <spi_init+0x324>)
     f4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f4c:	5da0      	ldrb	r0, [r4, r6]
     f4e:	2100      	movs	r1, #0
     f50:	4b5b      	ldr	r3, [pc, #364]	; (10c0 <spi_init+0x328>)
     f52:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     f54:	7823      	ldrb	r3, [r4, #0]
     f56:	2b01      	cmp	r3, #1
     f58:	d020      	beq.n	f9c <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
     f5a:	7823      	ldrb	r3, [r4, #0]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d103      	bne.n	f68 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	2208      	movs	r2, #8
     f64:	4313      	orrs	r3, r2
     f66:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f68:	464b      	mov	r3, r9
     f6a:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f6c:	ab04      	add	r3, sp, #16
     f6e:	2280      	movs	r2, #128	; 0x80
     f70:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f72:	2200      	movs	r2, #0
     f74:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f76:	2101      	movs	r1, #1
     f78:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     f7a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     f7c:	7823      	ldrb	r3, [r4, #0]
     f7e:	2b00      	cmp	r3, #0
     f80:	d101      	bne.n	f86 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f82:	ab04      	add	r3, sp, #16
     f84:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f88:	9305      	str	r3, [sp, #20]
     f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f8c:	9306      	str	r3, [sp, #24]
     f8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f90:	9307      	str	r3, [sp, #28]
     f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
     f94:	9308      	str	r3, [sp, #32]
     f96:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f98:	ad05      	add	r5, sp, #20
     f9a:	e011      	b.n	fc0 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     f9c:	683b      	ldr	r3, [r7, #0]
     f9e:	220c      	movs	r2, #12
     fa0:	4313      	orrs	r3, r2
     fa2:	603b      	str	r3, [r7, #0]
     fa4:	e7d9      	b.n	f5a <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fa6:	0030      	movs	r0, r6
     fa8:	4b3d      	ldr	r3, [pc, #244]	; (10a0 <spi_init+0x308>)
     faa:	4798      	blx	r3
     fac:	e00d      	b.n	fca <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fae:	a904      	add	r1, sp, #16
     fb0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fb2:	0c00      	lsrs	r0, r0, #16
     fb4:	b2c0      	uxtb	r0, r0
     fb6:	4b43      	ldr	r3, [pc, #268]	; (10c4 <spi_init+0x32c>)
     fb8:	4798      	blx	r3
     fba:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     fbc:	2f04      	cmp	r7, #4
     fbe:	d007      	beq.n	fd0 <spi_init+0x238>
     fc0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fc2:	00bb      	lsls	r3, r7, #2
     fc4:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     fc6:	2800      	cmp	r0, #0
     fc8:	d0ed      	beq.n	fa6 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
     fca:	1c43      	adds	r3, r0, #1
     fcc:	d1ef      	bne.n	fae <spi_init+0x216>
     fce:	e7f4      	b.n	fba <spi_init+0x222>
	module->mode             = config->mode;
     fd0:	7823      	ldrb	r3, [r4, #0]
     fd2:	464a      	mov	r2, r9
     fd4:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     fd6:	7c23      	ldrb	r3, [r4, #16]
     fd8:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     fda:	7ca3      	ldrb	r3, [r4, #18]
     fdc:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     fde:	7d23      	ldrb	r3, [r4, #20]
     fe0:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     fe2:	2200      	movs	r2, #0
     fe4:	ab02      	add	r3, sp, #8
     fe6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     fe8:	7823      	ldrb	r3, [r4, #0]
     fea:	2b01      	cmp	r3, #1
     fec:	d012      	beq.n	1014 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
     fee:	7823      	ldrb	r3, [r4, #0]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d127      	bne.n	1044 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
     ff4:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     ff6:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
     ff8:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     ffa:	7fe1      	ldrb	r1, [r4, #31]
     ffc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     ffe:	7fa5      	ldrb	r5, [r4, #30]
    1000:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    1002:	4319      	orrs	r1, r3
    1004:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1006:	2320      	movs	r3, #32
    1008:	5ce3      	ldrb	r3, [r4, r3]
    100a:	2b00      	cmp	r3, #0
    100c:	d01c      	beq.n	1048 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    100e:	2340      	movs	r3, #64	; 0x40
    1010:	431a      	orrs	r2, r3
    1012:	e019      	b.n	1048 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1014:	464b      	mov	r3, r9
    1016:	6818      	ldr	r0, [r3, #0]
    1018:	4b25      	ldr	r3, [pc, #148]	; (10b0 <spi_init+0x318>)
    101a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    101c:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    101e:	b2c0      	uxtb	r0, r0
    1020:	4b21      	ldr	r3, [pc, #132]	; (10a8 <spi_init+0x310>)
    1022:	4798      	blx	r3
    1024:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1026:	ab02      	add	r3, sp, #8
    1028:	1d9a      	adds	r2, r3, #6
    102a:	69a0      	ldr	r0, [r4, #24]
    102c:	4b1f      	ldr	r3, [pc, #124]	; (10ac <spi_init+0x314>)
    102e:	4798      	blx	r3
    1030:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1032:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1034:	2b00      	cmp	r3, #0
    1036:	d000      	beq.n	103a <spi_init+0x2a2>
    1038:	e6c0      	b.n	dbc <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    103a:	ab02      	add	r3, sp, #8
    103c:	3306      	adds	r3, #6
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	7333      	strb	r3, [r6, #12]
    1042:	e7d4      	b.n	fee <spi_init+0x256>
	uint32_t ctrlb = 0;
    1044:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1046:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1048:	6863      	ldr	r3, [r4, #4]
    104a:	68a1      	ldr	r1, [r4, #8]
    104c:	430b      	orrs	r3, r1
    104e:	68e1      	ldr	r1, [r4, #12]
    1050:	430b      	orrs	r3, r1
    1052:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1054:	7c21      	ldrb	r1, [r4, #16]
    1056:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1058:	7c61      	ldrb	r1, [r4, #17]
    105a:	2900      	cmp	r1, #0
    105c:	d103      	bne.n	1066 <spi_init+0x2ce>
    105e:	491a      	ldr	r1, [pc, #104]	; (10c8 <spi_init+0x330>)
    1060:	7889      	ldrb	r1, [r1, #2]
    1062:	0789      	lsls	r1, r1, #30
    1064:	d501      	bpl.n	106a <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1066:	2180      	movs	r1, #128	; 0x80
    1068:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    106a:	7ca1      	ldrb	r1, [r4, #18]
    106c:	2900      	cmp	r1, #0
    106e:	d002      	beq.n	1076 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1070:	2180      	movs	r1, #128	; 0x80
    1072:	0289      	lsls	r1, r1, #10
    1074:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1076:	7ce1      	ldrb	r1, [r4, #19]
    1078:	2900      	cmp	r1, #0
    107a:	d002      	beq.n	1082 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    107c:	2180      	movs	r1, #128	; 0x80
    107e:	0089      	lsls	r1, r1, #2
    1080:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1082:	7d21      	ldrb	r1, [r4, #20]
    1084:	2900      	cmp	r1, #0
    1086:	d002      	beq.n	108e <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1088:	2180      	movs	r1, #128	; 0x80
    108a:	0189      	lsls	r1, r1, #6
    108c:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    108e:	6831      	ldr	r1, [r6, #0]
    1090:	430b      	orrs	r3, r1
    1092:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1094:	6873      	ldr	r3, [r6, #4]
    1096:	431a      	orrs	r2, r3
    1098:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    109a:	2000      	movs	r0, #0
    109c:	e68e      	b.n	dbc <spi_init+0x24>
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	00000ca1 	.word	0x00000ca1
    10a4:	41004400 	.word	0x41004400
    10a8:	000018a9 	.word	0x000018a9
    10ac:	00000b97 	.word	0x00000b97
    10b0:	00000d61 	.word	0x00000d61
    10b4:	40000400 	.word	0x40000400
    10b8:	0000188d 	.word	0x0000188d
    10bc:	00001801 	.word	0x00001801
    10c0:	00000c55 	.word	0x00000c55
    10c4:	00001985 	.word	0x00001985
    10c8:	41002000 	.word	0x41002000

000010cc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    10cc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    10ce:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    10d0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    10d2:	2c01      	cmp	r4, #1
    10d4:	d001      	beq.n	10da <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    10d6:	0018      	movs	r0, r3
    10d8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    10da:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    10dc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    10de:	2c00      	cmp	r4, #0
    10e0:	d1f9      	bne.n	10d6 <spi_select_slave+0xa>
		if (select) {
    10e2:	2a00      	cmp	r2, #0
    10e4:	d058      	beq.n	1198 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    10e6:	784b      	ldrb	r3, [r1, #1]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d044      	beq.n	1176 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10ec:	6803      	ldr	r3, [r0, #0]
    10ee:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    10f0:	07db      	lsls	r3, r3, #31
    10f2:	d410      	bmi.n	1116 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    10f4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    10f6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    10f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10fa:	2900      	cmp	r1, #0
    10fc:	d104      	bne.n	1108 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    10fe:	0953      	lsrs	r3, r2, #5
    1100:	01db      	lsls	r3, r3, #7
    1102:	492e      	ldr	r1, [pc, #184]	; (11bc <spi_select_slave+0xf0>)
    1104:	468c      	mov	ip, r1
    1106:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1108:	211f      	movs	r1, #31
    110a:	4011      	ands	r1, r2
    110c:	2201      	movs	r2, #1
    110e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1110:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1112:	2305      	movs	r3, #5
    1114:	e7df      	b.n	10d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1116:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1118:	09d4      	lsrs	r4, r2, #7
		return NULL;
    111a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    111c:	2c00      	cmp	r4, #0
    111e:	d104      	bne.n	112a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1120:	0953      	lsrs	r3, r2, #5
    1122:	01db      	lsls	r3, r3, #7
    1124:	4c25      	ldr	r4, [pc, #148]	; (11bc <spi_select_slave+0xf0>)
    1126:	46a4      	mov	ip, r4
    1128:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    112a:	241f      	movs	r4, #31
    112c:	4014      	ands	r4, r2
    112e:	2201      	movs	r2, #1
    1130:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    1132:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1134:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1136:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1138:	07d2      	lsls	r2, r2, #31
    113a:	d501      	bpl.n	1140 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    113c:	788a      	ldrb	r2, [r1, #2]
    113e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1140:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1142:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1144:	2a00      	cmp	r2, #0
    1146:	d1c6      	bne.n	10d6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1148:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    114a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    114c:	7e13      	ldrb	r3, [r2, #24]
    114e:	420b      	tst	r3, r1
    1150:	d0fc      	beq.n	114c <spi_select_slave+0x80>
    1152:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1154:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1156:	0749      	lsls	r1, r1, #29
    1158:	d5bd      	bpl.n	10d6 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    115a:	8b53      	ldrh	r3, [r2, #26]
    115c:	075b      	lsls	r3, r3, #29
    115e:	d501      	bpl.n	1164 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1160:	2304      	movs	r3, #4
    1162:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1164:	7983      	ldrb	r3, [r0, #6]
    1166:	2b01      	cmp	r3, #1
    1168:	d002      	beq.n	1170 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    116a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    116c:	2300      	movs	r3, #0
    116e:	e7b2      	b.n	10d6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1170:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1172:	2300      	movs	r3, #0
    1174:	e7af      	b.n	10d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1176:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1178:	09d1      	lsrs	r1, r2, #7
		return NULL;
    117a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    117c:	2900      	cmp	r1, #0
    117e:	d104      	bne.n	118a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1180:	0953      	lsrs	r3, r2, #5
    1182:	01db      	lsls	r3, r3, #7
    1184:	490d      	ldr	r1, [pc, #52]	; (11bc <spi_select_slave+0xf0>)
    1186:	468c      	mov	ip, r1
    1188:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    118a:	211f      	movs	r1, #31
    118c:	4011      	ands	r1, r2
    118e:	2201      	movs	r2, #1
    1190:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1192:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1194:	2300      	movs	r3, #0
    1196:	e79e      	b.n	10d6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1198:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    119a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    119c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    119e:	2900      	cmp	r1, #0
    11a0:	d104      	bne.n	11ac <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    11a2:	0953      	lsrs	r3, r2, #5
    11a4:	01db      	lsls	r3, r3, #7
    11a6:	4905      	ldr	r1, [pc, #20]	; (11bc <spi_select_slave+0xf0>)
    11a8:	468c      	mov	ip, r1
    11aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11ac:	211f      	movs	r1, #31
    11ae:	4011      	ands	r1, r2
    11b0:	2201      	movs	r2, #1
    11b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    11b4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    11b6:	2300      	movs	r3, #0
    11b8:	e78d      	b.n	10d6 <spi_select_slave+0xa>
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	41004400 	.word	0x41004400

000011c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    11c0:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <cpu_irq_enter_critical+0x34>)
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d106      	bne.n	11d6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    11cc:	2b00      	cmp	r3, #0
    11ce:	d007      	beq.n	11e0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    11d0:	2200      	movs	r2, #0
    11d2:	4b09      	ldr	r3, [pc, #36]	; (11f8 <cpu_irq_enter_critical+0x38>)
    11d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    11d6:	4a07      	ldr	r2, [pc, #28]	; (11f4 <cpu_irq_enter_critical+0x34>)
    11d8:	6813      	ldr	r3, [r2, #0]
    11da:	3301      	adds	r3, #1
    11dc:	6013      	str	r3, [r2, #0]
}
    11de:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    11e0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    11e6:	2200      	movs	r2, #0
    11e8:	4b04      	ldr	r3, [pc, #16]	; (11fc <cpu_irq_enter_critical+0x3c>)
    11ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    11ec:	3201      	adds	r2, #1
    11ee:	4b02      	ldr	r3, [pc, #8]	; (11f8 <cpu_irq_enter_critical+0x38>)
    11f0:	701a      	strb	r2, [r3, #0]
    11f2:	e7f0      	b.n	11d6 <cpu_irq_enter_critical+0x16>
    11f4:	2000002c 	.word	0x2000002c
    11f8:	20000030 	.word	0x20000030
    11fc:	20000008 	.word	0x20000008

00001200 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1200:	4b08      	ldr	r3, [pc, #32]	; (1224 <cpu_irq_leave_critical+0x24>)
    1202:	681a      	ldr	r2, [r3, #0]
    1204:	3a01      	subs	r2, #1
    1206:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	2b00      	cmp	r3, #0
    120c:	d109      	bne.n	1222 <cpu_irq_leave_critical+0x22>
    120e:	4b06      	ldr	r3, [pc, #24]	; (1228 <cpu_irq_leave_critical+0x28>)
    1210:	781b      	ldrb	r3, [r3, #0]
    1212:	2b00      	cmp	r3, #0
    1214:	d005      	beq.n	1222 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1216:	2201      	movs	r2, #1
    1218:	4b04      	ldr	r3, [pc, #16]	; (122c <cpu_irq_leave_critical+0x2c>)
    121a:	701a      	strb	r2, [r3, #0]
    121c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1220:	b662      	cpsie	i
	}
}
    1222:	4770      	bx	lr
    1224:	2000002c 	.word	0x2000002c
    1228:	20000030 	.word	0x20000030
    122c:	20000008 	.word	0x20000008

00001230 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1230:	b5f0      	push	{r4, r5, r6, r7, lr}
    1232:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1234:	ac01      	add	r4, sp, #4
    1236:	2501      	movs	r5, #1
    1238:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    123a:	2700      	movs	r7, #0
    123c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    123e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1240:	0021      	movs	r1, r4
    1242:	2009      	movs	r0, #9
    1244:	4e06      	ldr	r6, [pc, #24]	; (1260 <system_board_init+0x30>)
    1246:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	0092      	lsls	r2, r2, #2
    124c:	4b05      	ldr	r3, [pc, #20]	; (1264 <system_board_init+0x34>)
    124e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1250:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1252:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1254:	0021      	movs	r1, r4
    1256:	2019      	movs	r0, #25
    1258:	47b0      	blx	r6
}
    125a:	b003      	add	sp, #12
    125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	00001269 	.word	0x00001269
    1264:	41004400 	.word	0x41004400

00001268 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1268:	b500      	push	{lr}
    126a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    126c:	ab01      	add	r3, sp, #4
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1272:	780a      	ldrb	r2, [r1, #0]
    1274:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1276:	784a      	ldrb	r2, [r1, #1]
    1278:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    127a:	788a      	ldrb	r2, [r1, #2]
    127c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    127e:	0019      	movs	r1, r3
    1280:	4b01      	ldr	r3, [pc, #4]	; (1288 <port_pin_set_config+0x20>)
    1282:	4798      	blx	r3
}
    1284:	b003      	add	sp, #12
    1286:	bd00      	pop	{pc}
    1288:	00001985 	.word	0x00001985

0000128c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    128c:	b510      	push	{r4, lr}
	switch (clock_source) {
    128e:	2808      	cmp	r0, #8
    1290:	d803      	bhi.n	129a <system_clock_source_get_hz+0xe>
    1292:	0080      	lsls	r0, r0, #2
    1294:	4b1c      	ldr	r3, [pc, #112]	; (1308 <system_clock_source_get_hz+0x7c>)
    1296:	581b      	ldr	r3, [r3, r0]
    1298:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    129a:	2000      	movs	r0, #0
    129c:	e032      	b.n	1304 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    129e:	4b1b      	ldr	r3, [pc, #108]	; (130c <system_clock_source_get_hz+0x80>)
    12a0:	6918      	ldr	r0, [r3, #16]
    12a2:	e02f      	b.n	1304 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12a4:	4b1a      	ldr	r3, [pc, #104]	; (1310 <system_clock_source_get_hz+0x84>)
    12a6:	6a1b      	ldr	r3, [r3, #32]
    12a8:	059b      	lsls	r3, r3, #22
    12aa:	0f9b      	lsrs	r3, r3, #30
    12ac:	4819      	ldr	r0, [pc, #100]	; (1314 <system_clock_source_get_hz+0x88>)
    12ae:	40d8      	lsrs	r0, r3
    12b0:	e028      	b.n	1304 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    12b2:	4b16      	ldr	r3, [pc, #88]	; (130c <system_clock_source_get_hz+0x80>)
    12b4:	6958      	ldr	r0, [r3, #20]
    12b6:	e025      	b.n	1304 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12b8:	4b14      	ldr	r3, [pc, #80]	; (130c <system_clock_source_get_hz+0x80>)
    12ba:	681b      	ldr	r3, [r3, #0]
			return 0;
    12bc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12be:	079b      	lsls	r3, r3, #30
    12c0:	d520      	bpl.n	1304 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12c2:	4913      	ldr	r1, [pc, #76]	; (1310 <system_clock_source_get_hz+0x84>)
    12c4:	2210      	movs	r2, #16
    12c6:	68cb      	ldr	r3, [r1, #12]
    12c8:	421a      	tst	r2, r3
    12ca:	d0fc      	beq.n	12c6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    12cc:	4b0f      	ldr	r3, [pc, #60]	; (130c <system_clock_source_get_hz+0x80>)
    12ce:	681a      	ldr	r2, [r3, #0]
    12d0:	2324      	movs	r3, #36	; 0x24
    12d2:	4013      	ands	r3, r2
    12d4:	2b04      	cmp	r3, #4
    12d6:	d001      	beq.n	12dc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    12d8:	480f      	ldr	r0, [pc, #60]	; (1318 <system_clock_source_get_hz+0x8c>)
    12da:	e013      	b.n	1304 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12dc:	2000      	movs	r0, #0
    12de:	4b0f      	ldr	r3, [pc, #60]	; (131c <system_clock_source_get_hz+0x90>)
    12e0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12e2:	4b0a      	ldr	r3, [pc, #40]	; (130c <system_clock_source_get_hz+0x80>)
    12e4:	689b      	ldr	r3, [r3, #8]
    12e6:	041b      	lsls	r3, r3, #16
    12e8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12ea:	4358      	muls	r0, r3
    12ec:	e00a      	b.n	1304 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12ee:	2350      	movs	r3, #80	; 0x50
    12f0:	4a07      	ldr	r2, [pc, #28]	; (1310 <system_clock_source_get_hz+0x84>)
    12f2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12f4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12f6:	075b      	lsls	r3, r3, #29
    12f8:	d504      	bpl.n	1304 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    12fa:	4b04      	ldr	r3, [pc, #16]	; (130c <system_clock_source_get_hz+0x80>)
    12fc:	68d8      	ldr	r0, [r3, #12]
    12fe:	e001      	b.n	1304 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1300:	2080      	movs	r0, #128	; 0x80
    1302:	0200      	lsls	r0, r0, #8
	}
}
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	000020dc 	.word	0x000020dc
    130c:	20000034 	.word	0x20000034
    1310:	40000800 	.word	0x40000800
    1314:	007a1200 	.word	0x007a1200
    1318:	02dc6c00 	.word	0x02dc6c00
    131c:	000018a9 	.word	0x000018a9

00001320 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1320:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1322:	490c      	ldr	r1, [pc, #48]	; (1354 <system_clock_source_osc8m_set_config+0x34>)
    1324:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1326:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1328:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    132a:	7840      	ldrb	r0, [r0, #1]
    132c:	2201      	movs	r2, #1
    132e:	4010      	ands	r0, r2
    1330:	0180      	lsls	r0, r0, #6
    1332:	2640      	movs	r6, #64	; 0x40
    1334:	43b3      	bics	r3, r6
    1336:	4303      	orrs	r3, r0
    1338:	402a      	ands	r2, r5
    133a:	01d2      	lsls	r2, r2, #7
    133c:	2080      	movs	r0, #128	; 0x80
    133e:	4383      	bics	r3, r0
    1340:	4313      	orrs	r3, r2
    1342:	2203      	movs	r2, #3
    1344:	4022      	ands	r2, r4
    1346:	0212      	lsls	r2, r2, #8
    1348:	4803      	ldr	r0, [pc, #12]	; (1358 <system_clock_source_osc8m_set_config+0x38>)
    134a:	4003      	ands	r3, r0
    134c:	4313      	orrs	r3, r2
    134e:	620b      	str	r3, [r1, #32]
}
    1350:	bd70      	pop	{r4, r5, r6, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	40000800 	.word	0x40000800
    1358:	fffffcff 	.word	0xfffffcff

0000135c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    135c:	b5f0      	push	{r4, r5, r6, r7, lr}
    135e:	46ce      	mov	lr, r9
    1360:	4647      	mov	r7, r8
    1362:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1364:	4b19      	ldr	r3, [pc, #100]	; (13cc <system_clock_source_osc32k_set_config+0x70>)
    1366:	4699      	mov	r9, r3
    1368:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    136a:	7841      	ldrb	r1, [r0, #1]
    136c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    136e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1370:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1372:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1374:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1376:	7880      	ldrb	r0, [r0, #2]
    1378:	2101      	movs	r1, #1
    137a:	4008      	ands	r0, r1
    137c:	0080      	lsls	r0, r0, #2
    137e:	2204      	movs	r2, #4
    1380:	4393      	bics	r3, r2
    1382:	4303      	orrs	r3, r0
    1384:	4660      	mov	r0, ip
    1386:	4008      	ands	r0, r1
    1388:	00c0      	lsls	r0, r0, #3
    138a:	3204      	adds	r2, #4
    138c:	4393      	bics	r3, r2
    138e:	4303      	orrs	r3, r0
    1390:	0038      	movs	r0, r7
    1392:	4008      	ands	r0, r1
    1394:	0180      	lsls	r0, r0, #6
    1396:	2740      	movs	r7, #64	; 0x40
    1398:	43bb      	bics	r3, r7
    139a:	4303      	orrs	r3, r0
    139c:	0030      	movs	r0, r6
    139e:	4008      	ands	r0, r1
    13a0:	01c0      	lsls	r0, r0, #7
    13a2:	2680      	movs	r6, #128	; 0x80
    13a4:	43b3      	bics	r3, r6
    13a6:	4303      	orrs	r3, r0
    13a8:	2007      	movs	r0, #7
    13aa:	4005      	ands	r5, r0
    13ac:	022d      	lsls	r5, r5, #8
    13ae:	4808      	ldr	r0, [pc, #32]	; (13d0 <system_clock_source_osc32k_set_config+0x74>)
    13b0:	4003      	ands	r3, r0
    13b2:	432b      	orrs	r3, r5
    13b4:	4021      	ands	r1, r4
    13b6:	0309      	lsls	r1, r1, #12
    13b8:	4806      	ldr	r0, [pc, #24]	; (13d4 <system_clock_source_osc32k_set_config+0x78>)
    13ba:	4003      	ands	r3, r0
    13bc:	430b      	orrs	r3, r1
    13be:	464a      	mov	r2, r9
    13c0:	6193      	str	r3, [r2, #24]
}
    13c2:	bc0c      	pop	{r2, r3}
    13c4:	4690      	mov	r8, r2
    13c6:	4699      	mov	r9, r3
    13c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	40000800 	.word	0x40000800
    13d0:	fffff8ff 	.word	0xfffff8ff
    13d4:	ffffefff 	.word	0xffffefff

000013d8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    13d8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    13da:	7a03      	ldrb	r3, [r0, #8]
    13dc:	069b      	lsls	r3, r3, #26
    13de:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    13e0:	8942      	ldrh	r2, [r0, #10]
    13e2:	0592      	lsls	r2, r2, #22
    13e4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    13e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    13e8:	4918      	ldr	r1, [pc, #96]	; (144c <system_clock_source_dfll_set_config+0x74>)
    13ea:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    13ec:	7983      	ldrb	r3, [r0, #6]
    13ee:	79c2      	ldrb	r2, [r0, #7]
    13f0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    13f2:	8842      	ldrh	r2, [r0, #2]
    13f4:	8884      	ldrh	r4, [r0, #4]
    13f6:	4322      	orrs	r2, r4
    13f8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    13fa:	7842      	ldrb	r2, [r0, #1]
    13fc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    13fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1400:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1402:	7803      	ldrb	r3, [r0, #0]
    1404:	2b04      	cmp	r3, #4
    1406:	d011      	beq.n	142c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1408:	2b20      	cmp	r3, #32
    140a:	d10e      	bne.n	142a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    140c:	7b03      	ldrb	r3, [r0, #12]
    140e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1410:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1412:	4313      	orrs	r3, r2
    1414:	89c2      	ldrh	r2, [r0, #14]
    1416:	0412      	lsls	r2, r2, #16
    1418:	490d      	ldr	r1, [pc, #52]	; (1450 <system_clock_source_dfll_set_config+0x78>)
    141a:	400a      	ands	r2, r1
    141c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    141e:	4a0b      	ldr	r2, [pc, #44]	; (144c <system_clock_source_dfll_set_config+0x74>)
    1420:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1422:	6811      	ldr	r1, [r2, #0]
    1424:	4b0b      	ldr	r3, [pc, #44]	; (1454 <system_clock_source_dfll_set_config+0x7c>)
    1426:	430b      	orrs	r3, r1
    1428:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    142a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    142c:	7b03      	ldrb	r3, [r0, #12]
    142e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1430:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1432:	4313      	orrs	r3, r2
    1434:	89c2      	ldrh	r2, [r0, #14]
    1436:	0412      	lsls	r2, r2, #16
    1438:	4905      	ldr	r1, [pc, #20]	; (1450 <system_clock_source_dfll_set_config+0x78>)
    143a:	400a      	ands	r2, r1
    143c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    143e:	4a03      	ldr	r2, [pc, #12]	; (144c <system_clock_source_dfll_set_config+0x74>)
    1440:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1442:	6813      	ldr	r3, [r2, #0]
    1444:	2104      	movs	r1, #4
    1446:	430b      	orrs	r3, r1
    1448:	6013      	str	r3, [r2, #0]
    144a:	e7ee      	b.n	142a <system_clock_source_dfll_set_config+0x52>
    144c:	20000034 	.word	0x20000034
    1450:	03ff0000 	.word	0x03ff0000
    1454:	00000424 	.word	0x00000424

00001458 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1458:	2808      	cmp	r0, #8
    145a:	d803      	bhi.n	1464 <system_clock_source_enable+0xc>
    145c:	0080      	lsls	r0, r0, #2
    145e:	4b25      	ldr	r3, [pc, #148]	; (14f4 <system_clock_source_enable+0x9c>)
    1460:	581b      	ldr	r3, [r3, r0]
    1462:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1464:	2017      	movs	r0, #23
    1466:	e044      	b.n	14f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1468:	4a23      	ldr	r2, [pc, #140]	; (14f8 <system_clock_source_enable+0xa0>)
    146a:	6a13      	ldr	r3, [r2, #32]
    146c:	2102      	movs	r1, #2
    146e:	430b      	orrs	r3, r1
    1470:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1472:	2000      	movs	r0, #0
    1474:	e03d      	b.n	14f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1476:	4a20      	ldr	r2, [pc, #128]	; (14f8 <system_clock_source_enable+0xa0>)
    1478:	6993      	ldr	r3, [r2, #24]
    147a:	2102      	movs	r1, #2
    147c:	430b      	orrs	r3, r1
    147e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1480:	2000      	movs	r0, #0
		break;
    1482:	e036      	b.n	14f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1484:	4a1c      	ldr	r2, [pc, #112]	; (14f8 <system_clock_source_enable+0xa0>)
    1486:	8a13      	ldrh	r3, [r2, #16]
    1488:	2102      	movs	r1, #2
    148a:	430b      	orrs	r3, r1
    148c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    148e:	2000      	movs	r0, #0
		break;
    1490:	e02f      	b.n	14f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1492:	4a19      	ldr	r2, [pc, #100]	; (14f8 <system_clock_source_enable+0xa0>)
    1494:	8a93      	ldrh	r3, [r2, #20]
    1496:	2102      	movs	r1, #2
    1498:	430b      	orrs	r3, r1
    149a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    149c:	2000      	movs	r0, #0
		break;
    149e:	e028      	b.n	14f2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14a0:	4916      	ldr	r1, [pc, #88]	; (14fc <system_clock_source_enable+0xa4>)
    14a2:	680b      	ldr	r3, [r1, #0]
    14a4:	2202      	movs	r2, #2
    14a6:	4313      	orrs	r3, r2
    14a8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    14aa:	4b13      	ldr	r3, [pc, #76]	; (14f8 <system_clock_source_enable+0xa0>)
    14ac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14ae:	0019      	movs	r1, r3
    14b0:	320e      	adds	r2, #14
    14b2:	68cb      	ldr	r3, [r1, #12]
    14b4:	421a      	tst	r2, r3
    14b6:	d0fc      	beq.n	14b2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14b8:	4a10      	ldr	r2, [pc, #64]	; (14fc <system_clock_source_enable+0xa4>)
    14ba:	6891      	ldr	r1, [r2, #8]
    14bc:	4b0e      	ldr	r3, [pc, #56]	; (14f8 <system_clock_source_enable+0xa0>)
    14be:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    14c0:	6852      	ldr	r2, [r2, #4]
    14c2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    14c4:	2200      	movs	r2, #0
    14c6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14c8:	0019      	movs	r1, r3
    14ca:	3210      	adds	r2, #16
    14cc:	68cb      	ldr	r3, [r1, #12]
    14ce:	421a      	tst	r2, r3
    14d0:	d0fc      	beq.n	14cc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14d2:	4b0a      	ldr	r3, [pc, #40]	; (14fc <system_clock_source_enable+0xa4>)
    14d4:	681b      	ldr	r3, [r3, #0]
    14d6:	b29b      	uxth	r3, r3
    14d8:	4a07      	ldr	r2, [pc, #28]	; (14f8 <system_clock_source_enable+0xa0>)
    14da:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    14dc:	2000      	movs	r0, #0
    14de:	e008      	b.n	14f2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    14e0:	4905      	ldr	r1, [pc, #20]	; (14f8 <system_clock_source_enable+0xa0>)
    14e2:	2244      	movs	r2, #68	; 0x44
    14e4:	5c8b      	ldrb	r3, [r1, r2]
    14e6:	2002      	movs	r0, #2
    14e8:	4303      	orrs	r3, r0
    14ea:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    14ec:	2000      	movs	r0, #0
		break;
    14ee:	e000      	b.n	14f2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    14f0:	2000      	movs	r0, #0
}
    14f2:	4770      	bx	lr
    14f4:	00002100 	.word	0x00002100
    14f8:	40000800 	.word	0x40000800
    14fc:	20000034 	.word	0x20000034

00001500 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1500:	b5f0      	push	{r4, r5, r6, r7, lr}
    1502:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1504:	22c2      	movs	r2, #194	; 0xc2
    1506:	00d2      	lsls	r2, r2, #3
    1508:	4b44      	ldr	r3, [pc, #272]	; (161c <system_clock_init+0x11c>)
    150a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    150c:	4944      	ldr	r1, [pc, #272]	; (1620 <system_clock_init+0x120>)
    150e:	684b      	ldr	r3, [r1, #4]
    1510:	221e      	movs	r2, #30
    1512:	4393      	bics	r3, r2
    1514:	3a1c      	subs	r2, #28
    1516:	4313      	orrs	r3, r2
    1518:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    151a:	ab01      	add	r3, sp, #4
    151c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    151e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1520:	4d40      	ldr	r5, [pc, #256]	; (1624 <system_clock_init+0x124>)
    1522:	b2e0      	uxtb	r0, r4
    1524:	a901      	add	r1, sp, #4
    1526:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1528:	3401      	adds	r4, #1
    152a:	2c18      	cmp	r4, #24
    152c:	d1f9      	bne.n	1522 <system_clock_init+0x22>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    152e:	4c3e      	ldr	r4, [pc, #248]	; (1628 <system_clock_init+0x128>)
    1530:	6823      	ldr	r3, [r4, #0]
    1532:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1534:	4939      	ldr	r1, [pc, #228]	; (161c <system_clock_init+0x11c>)
    1536:	698a      	ldr	r2, [r1, #24]
    1538:	0e5b      	lsrs	r3, r3, #25
    153a:	041b      	lsls	r3, r3, #16
    153c:	483b      	ldr	r0, [pc, #236]	; (162c <system_clock_init+0x12c>)
    153e:	4002      	ands	r2, r0
    1540:	4313      	orrs	r3, r2
    1542:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1544:	a80a      	add	r0, sp, #40	; 0x28
    1546:	2301      	movs	r3, #1
    1548:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    154a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    154c:	2500      	movs	r5, #0
    154e:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    1550:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1552:	3306      	adds	r3, #6
    1554:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1556:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1558:	4b35      	ldr	r3, [pc, #212]	; (1630 <system_clock_init+0x130>)
    155a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    155c:	2004      	movs	r0, #4
    155e:	4b35      	ldr	r3, [pc, #212]	; (1634 <system_clock_init+0x134>)
    1560:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1562:	ab05      	add	r3, sp, #20
    1564:	2200      	movs	r2, #0
    1566:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1568:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    156a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    156c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    156e:	213f      	movs	r1, #63	; 0x3f
    1570:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1572:	393b      	subs	r1, #59	; 0x3b
    1574:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1576:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1578:	6823      	ldr	r3, [r4, #0]
    157a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    157c:	2b3f      	cmp	r3, #63	; 0x3f
    157e:	d04b      	beq.n	1618 <system_clock_init+0x118>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    1580:	a805      	add	r0, sp, #20
    1582:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1584:	23b7      	movs	r3, #183	; 0xb7
    1586:	00db      	lsls	r3, r3, #3
    1588:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    158a:	2307      	movs	r3, #7
    158c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    158e:	3338      	adds	r3, #56	; 0x38
    1590:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1592:	4b29      	ldr	r3, [pc, #164]	; (1638 <system_clock_init+0x138>)
    1594:	4798      	blx	r3
	config->run_in_standby  = false;
    1596:	a804      	add	r0, sp, #16
    1598:	2500      	movs	r5, #0
    159a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    159c:	2601      	movs	r6, #1
    159e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    15a0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    15a2:	4b26      	ldr	r3, [pc, #152]	; (163c <system_clock_init+0x13c>)
    15a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    15a6:	2006      	movs	r0, #6
    15a8:	4f22      	ldr	r7, [pc, #136]	; (1634 <system_clock_init+0x134>)
    15aa:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    15ac:	4b24      	ldr	r3, [pc, #144]	; (1640 <system_clock_init+0x140>)
    15ae:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    15b0:	ac01      	add	r4, sp, #4
    15b2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    15b4:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    15b6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    15b8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    15ba:	2304      	movs	r3, #4
    15bc:	7023      	strb	r3, [r4, #0]
    15be:	0021      	movs	r1, r4
    15c0:	2001      	movs	r0, #1
    15c2:	4b20      	ldr	r3, [pc, #128]	; (1644 <system_clock_init+0x144>)
    15c4:	4798      	blx	r3
    15c6:	2001      	movs	r0, #1
    15c8:	4b1f      	ldr	r3, [pc, #124]	; (1648 <system_clock_init+0x148>)
    15ca:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    15cc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    15ce:	0021      	movs	r1, r4
    15d0:	2000      	movs	r0, #0
    15d2:	4b14      	ldr	r3, [pc, #80]	; (1624 <system_clock_init+0x124>)
    15d4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    15d6:	2000      	movs	r0, #0
    15d8:	4b1c      	ldr	r3, [pc, #112]	; (164c <system_clock_init+0x14c>)
    15da:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    15dc:	2007      	movs	r0, #7
    15de:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    15e0:	490e      	ldr	r1, [pc, #56]	; (161c <system_clock_init+0x11c>)
    15e2:	22d0      	movs	r2, #208	; 0xd0
    15e4:	68cb      	ldr	r3, [r1, #12]
    15e6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    15e8:	2bd0      	cmp	r3, #208	; 0xd0
    15ea:	d1fb      	bne.n	15e4 <system_clock_init+0xe4>
	PM->CPUSEL.reg = (uint32_t)divider;
    15ec:	4a18      	ldr	r2, [pc, #96]	; (1650 <system_clock_init+0x150>)
    15ee:	2300      	movs	r3, #0
    15f0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    15f2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    15f4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    15f6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    15f8:	a901      	add	r1, sp, #4
    15fa:	2201      	movs	r2, #1
    15fc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    15fe:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1600:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1602:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1604:	3307      	adds	r3, #7
    1606:	700b      	strb	r3, [r1, #0]
    1608:	2000      	movs	r0, #0
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <system_clock_init+0x144>)
    160c:	4798      	blx	r3
    160e:	2000      	movs	r0, #0
    1610:	4b0d      	ldr	r3, [pc, #52]	; (1648 <system_clock_init+0x148>)
    1612:	4798      	blx	r3
#endif
}
    1614:	b00d      	add	sp, #52	; 0x34
    1616:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1618:	3b20      	subs	r3, #32
    161a:	e7b1      	b.n	1580 <system_clock_init+0x80>
    161c:	40000800 	.word	0x40000800
    1620:	41004000 	.word	0x41004000
    1624:	0000188d 	.word	0x0000188d
    1628:	00806024 	.word	0x00806024
    162c:	ff80ffff 	.word	0xff80ffff
    1630:	0000135d 	.word	0x0000135d
    1634:	00001459 	.word	0x00001459
    1638:	000013d9 	.word	0x000013d9
    163c:	00001321 	.word	0x00001321
    1640:	00001655 	.word	0x00001655
    1644:	00001679 	.word	0x00001679
    1648:	00001731 	.word	0x00001731
    164c:	00001801 	.word	0x00001801
    1650:	40000400 	.word	0x40000400

00001654 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1654:	4a06      	ldr	r2, [pc, #24]	; (1670 <system_gclk_init+0x1c>)
    1656:	6993      	ldr	r3, [r2, #24]
    1658:	2108      	movs	r1, #8
    165a:	430b      	orrs	r3, r1
    165c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    165e:	2201      	movs	r2, #1
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <system_gclk_init+0x20>)
    1662:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1664:	0019      	movs	r1, r3
    1666:	780b      	ldrb	r3, [r1, #0]
    1668:	4213      	tst	r3, r2
    166a:	d1fc      	bne.n	1666 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    166c:	4770      	bx	lr
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	40000400 	.word	0x40000400
    1674:	40000c00 	.word	0x40000c00

00001678 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    167c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    167e:	780d      	ldrb	r5, [r1, #0]
    1680:	022d      	lsls	r5, r5, #8
    1682:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1684:	784b      	ldrb	r3, [r1, #1]
    1686:	2b00      	cmp	r3, #0
    1688:	d002      	beq.n	1690 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    168a:	2380      	movs	r3, #128	; 0x80
    168c:	02db      	lsls	r3, r3, #11
    168e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1690:	7a4b      	ldrb	r3, [r1, #9]
    1692:	2b00      	cmp	r3, #0
    1694:	d002      	beq.n	169c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1696:	2380      	movs	r3, #128	; 0x80
    1698:	031b      	lsls	r3, r3, #12
    169a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    169c:	6848      	ldr	r0, [r1, #4]
    169e:	2801      	cmp	r0, #1
    16a0:	d910      	bls.n	16c4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    16a2:	1e43      	subs	r3, r0, #1
    16a4:	4218      	tst	r0, r3
    16a6:	d134      	bne.n	1712 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16a8:	2802      	cmp	r0, #2
    16aa:	d930      	bls.n	170e <system_gclk_gen_set_config+0x96>
    16ac:	2302      	movs	r3, #2
    16ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    16b0:	3201      	adds	r2, #1
						mask <<= 1) {
    16b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    16b4:	4298      	cmp	r0, r3
    16b6:	d8fb      	bhi.n	16b0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16b8:	0212      	lsls	r2, r2, #8
    16ba:	4332      	orrs	r2, r6
    16bc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16be:	2380      	movs	r3, #128	; 0x80
    16c0:	035b      	lsls	r3, r3, #13
    16c2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16c4:	7a0b      	ldrb	r3, [r1, #8]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d002      	beq.n	16d0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16ca:	2380      	movs	r3, #128	; 0x80
    16cc:	039b      	lsls	r3, r3, #14
    16ce:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16d0:	4a13      	ldr	r2, [pc, #76]	; (1720 <system_gclk_gen_set_config+0xa8>)
    16d2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    16d4:	b25b      	sxtb	r3, r3
    16d6:	2b00      	cmp	r3, #0
    16d8:	dbfb      	blt.n	16d2 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16da:	4b12      	ldr	r3, [pc, #72]	; (1724 <system_gclk_gen_set_config+0xac>)
    16dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16de:	4b12      	ldr	r3, [pc, #72]	; (1728 <system_gclk_gen_set_config+0xb0>)
    16e0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16e2:	4a0f      	ldr	r2, [pc, #60]	; (1720 <system_gclk_gen_set_config+0xa8>)
    16e4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    16e6:	b25b      	sxtb	r3, r3
    16e8:	2b00      	cmp	r3, #0
    16ea:	dbfb      	blt.n	16e4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    16ec:	4b0c      	ldr	r3, [pc, #48]	; (1720 <system_gclk_gen_set_config+0xa8>)
    16ee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16f0:	001a      	movs	r2, r3
    16f2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    16f4:	b25b      	sxtb	r3, r3
    16f6:	2b00      	cmp	r3, #0
    16f8:	dbfb      	blt.n	16f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    16fa:	4a09      	ldr	r2, [pc, #36]	; (1720 <system_gclk_gen_set_config+0xa8>)
    16fc:	6853      	ldr	r3, [r2, #4]
    16fe:	2180      	movs	r1, #128	; 0x80
    1700:	0249      	lsls	r1, r1, #9
    1702:	400b      	ands	r3, r1
    1704:	431d      	orrs	r5, r3
    1706:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1708:	4b08      	ldr	r3, [pc, #32]	; (172c <system_gclk_gen_set_config+0xb4>)
    170a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    170c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    170e:	2200      	movs	r2, #0
    1710:	e7d2      	b.n	16b8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1712:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1714:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1716:	2380      	movs	r3, #128	; 0x80
    1718:	029b      	lsls	r3, r3, #10
    171a:	431d      	orrs	r5, r3
    171c:	e7d2      	b.n	16c4 <system_gclk_gen_set_config+0x4c>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	40000c00 	.word	0x40000c00
    1724:	000011c1 	.word	0x000011c1
    1728:	40000c08 	.word	0x40000c08
    172c:	00001201 	.word	0x00001201

00001730 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1730:	b510      	push	{r4, lr}
    1732:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1734:	4a0b      	ldr	r2, [pc, #44]	; (1764 <system_gclk_gen_enable+0x34>)
    1736:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1738:	b25b      	sxtb	r3, r3
    173a:	2b00      	cmp	r3, #0
    173c:	dbfb      	blt.n	1736 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    173e:	4b0a      	ldr	r3, [pc, #40]	; (1768 <system_gclk_gen_enable+0x38>)
    1740:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1742:	4b0a      	ldr	r3, [pc, #40]	; (176c <system_gclk_gen_enable+0x3c>)
    1744:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1746:	4a07      	ldr	r2, [pc, #28]	; (1764 <system_gclk_gen_enable+0x34>)
    1748:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    174a:	b25b      	sxtb	r3, r3
    174c:	2b00      	cmp	r3, #0
    174e:	dbfb      	blt.n	1748 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1750:	4a04      	ldr	r2, [pc, #16]	; (1764 <system_gclk_gen_enable+0x34>)
    1752:	6851      	ldr	r1, [r2, #4]
    1754:	2380      	movs	r3, #128	; 0x80
    1756:	025b      	lsls	r3, r3, #9
    1758:	430b      	orrs	r3, r1
    175a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <system_gclk_gen_enable+0x40>)
    175e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1760:	bd10      	pop	{r4, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	40000c00 	.word	0x40000c00
    1768:	000011c1 	.word	0x000011c1
    176c:	40000c04 	.word	0x40000c04
    1770:	00001201 	.word	0x00001201

00001774 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1774:	b570      	push	{r4, r5, r6, lr}
    1776:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1778:	4a1a      	ldr	r2, [pc, #104]	; (17e4 <system_gclk_gen_get_hz+0x70>)
    177a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    177c:	b25b      	sxtb	r3, r3
    177e:	2b00      	cmp	r3, #0
    1780:	dbfb      	blt.n	177a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1782:	4b19      	ldr	r3, [pc, #100]	; (17e8 <system_gclk_gen_get_hz+0x74>)
    1784:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1786:	4b19      	ldr	r3, [pc, #100]	; (17ec <system_gclk_gen_get_hz+0x78>)
    1788:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    178a:	4a16      	ldr	r2, [pc, #88]	; (17e4 <system_gclk_gen_get_hz+0x70>)
    178c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    178e:	b25b      	sxtb	r3, r3
    1790:	2b00      	cmp	r3, #0
    1792:	dbfb      	blt.n	178c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1794:	4e13      	ldr	r6, [pc, #76]	; (17e4 <system_gclk_gen_get_hz+0x70>)
    1796:	6870      	ldr	r0, [r6, #4]
    1798:	04c0      	lsls	r0, r0, #19
    179a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    179c:	4b14      	ldr	r3, [pc, #80]	; (17f0 <system_gclk_gen_get_hz+0x7c>)
    179e:	4798      	blx	r3
    17a0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    17a2:	4b12      	ldr	r3, [pc, #72]	; (17ec <system_gclk_gen_get_hz+0x78>)
    17a4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    17a6:	6876      	ldr	r6, [r6, #4]
    17a8:	02f6      	lsls	r6, r6, #11
    17aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17ac:	4b11      	ldr	r3, [pc, #68]	; (17f4 <system_gclk_gen_get_hz+0x80>)
    17ae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17b0:	4a0c      	ldr	r2, [pc, #48]	; (17e4 <system_gclk_gen_get_hz+0x70>)
    17b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    17b4:	b25b      	sxtb	r3, r3
    17b6:	2b00      	cmp	r3, #0
    17b8:	dbfb      	blt.n	17b2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    17ba:	4b0a      	ldr	r3, [pc, #40]	; (17e4 <system_gclk_gen_get_hz+0x70>)
    17bc:	689c      	ldr	r4, [r3, #8]
    17be:	0224      	lsls	r4, r4, #8
    17c0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    17c2:	4b0d      	ldr	r3, [pc, #52]	; (17f8 <system_gclk_gen_get_hz+0x84>)
    17c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17c6:	2e00      	cmp	r6, #0
    17c8:	d107      	bne.n	17da <system_gclk_gen_get_hz+0x66>
    17ca:	2c01      	cmp	r4, #1
    17cc:	d907      	bls.n	17de <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    17ce:	0021      	movs	r1, r4
    17d0:	0028      	movs	r0, r5
    17d2:	4b0a      	ldr	r3, [pc, #40]	; (17fc <system_gclk_gen_get_hz+0x88>)
    17d4:	4798      	blx	r3
    17d6:	0005      	movs	r5, r0
    17d8:	e001      	b.n	17de <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    17da:	3401      	adds	r4, #1
    17dc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17de:	0028      	movs	r0, r5
    17e0:	bd70      	pop	{r4, r5, r6, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	40000c00 	.word	0x40000c00
    17e8:	000011c1 	.word	0x000011c1
    17ec:	40000c04 	.word	0x40000c04
    17f0:	0000128d 	.word	0x0000128d
    17f4:	40000c08 	.word	0x40000c08
    17f8:	00001201 	.word	0x00001201
    17fc:	00001d2d 	.word	0x00001d2d

00001800 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1800:	b510      	push	{r4, lr}
    1802:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <system_gclk_chan_enable+0x20>)
    1806:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1808:	4b06      	ldr	r3, [pc, #24]	; (1824 <system_gclk_chan_enable+0x24>)
    180a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    180c:	4a06      	ldr	r2, [pc, #24]	; (1828 <system_gclk_chan_enable+0x28>)
    180e:	8853      	ldrh	r3, [r2, #2]
    1810:	2180      	movs	r1, #128	; 0x80
    1812:	01c9      	lsls	r1, r1, #7
    1814:	430b      	orrs	r3, r1
    1816:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1818:	4b04      	ldr	r3, [pc, #16]	; (182c <system_gclk_chan_enable+0x2c>)
    181a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    181c:	bd10      	pop	{r4, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	000011c1 	.word	0x000011c1
    1824:	40000c02 	.word	0x40000c02
    1828:	40000c00 	.word	0x40000c00
    182c:	00001201 	.word	0x00001201

00001830 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1830:	b510      	push	{r4, lr}
    1832:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1834:	4b0f      	ldr	r3, [pc, #60]	; (1874 <system_gclk_chan_disable+0x44>)
    1836:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1838:	4b0f      	ldr	r3, [pc, #60]	; (1878 <system_gclk_chan_disable+0x48>)
    183a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    183c:	4a0f      	ldr	r2, [pc, #60]	; (187c <system_gclk_chan_disable+0x4c>)
    183e:	8853      	ldrh	r3, [r2, #2]
    1840:	051b      	lsls	r3, r3, #20
    1842:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1844:	8853      	ldrh	r3, [r2, #2]
    1846:	490e      	ldr	r1, [pc, #56]	; (1880 <system_gclk_chan_disable+0x50>)
    1848:	400b      	ands	r3, r1
    184a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    184c:	8853      	ldrh	r3, [r2, #2]
    184e:	490d      	ldr	r1, [pc, #52]	; (1884 <system_gclk_chan_disable+0x54>)
    1850:	400b      	ands	r3, r1
    1852:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1854:	0011      	movs	r1, r2
    1856:	2280      	movs	r2, #128	; 0x80
    1858:	01d2      	lsls	r2, r2, #7
    185a:	884b      	ldrh	r3, [r1, #2]
    185c:	4213      	tst	r3, r2
    185e:	d1fc      	bne.n	185a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1860:	4906      	ldr	r1, [pc, #24]	; (187c <system_gclk_chan_disable+0x4c>)
    1862:	884a      	ldrh	r2, [r1, #2]
    1864:	0203      	lsls	r3, r0, #8
    1866:	4806      	ldr	r0, [pc, #24]	; (1880 <system_gclk_chan_disable+0x50>)
    1868:	4002      	ands	r2, r0
    186a:	4313      	orrs	r3, r2
    186c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    186e:	4b06      	ldr	r3, [pc, #24]	; (1888 <system_gclk_chan_disable+0x58>)
    1870:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1872:	bd10      	pop	{r4, pc}
    1874:	000011c1 	.word	0x000011c1
    1878:	40000c02 	.word	0x40000c02
    187c:	40000c00 	.word	0x40000c00
    1880:	fffff0ff 	.word	0xfffff0ff
    1884:	ffffbfff 	.word	0xffffbfff
    1888:	00001201 	.word	0x00001201

0000188c <system_gclk_chan_set_config>:
{
    188c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    188e:	780c      	ldrb	r4, [r1, #0]
    1890:	0224      	lsls	r4, r4, #8
    1892:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <system_gclk_chan_set_config+0x14>)
    1896:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1898:	b2a4      	uxth	r4, r4
    189a:	4b02      	ldr	r3, [pc, #8]	; (18a4 <system_gclk_chan_set_config+0x18>)
    189c:	805c      	strh	r4, [r3, #2]
}
    189e:	bd10      	pop	{r4, pc}
    18a0:	00001831 	.word	0x00001831
    18a4:	40000c00 	.word	0x40000c00

000018a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    18a8:	b510      	push	{r4, lr}
    18aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    18ac:	4b06      	ldr	r3, [pc, #24]	; (18c8 <system_gclk_chan_get_hz+0x20>)
    18ae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18b0:	4b06      	ldr	r3, [pc, #24]	; (18cc <system_gclk_chan_get_hz+0x24>)
    18b2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    18b4:	4b06      	ldr	r3, [pc, #24]	; (18d0 <system_gclk_chan_get_hz+0x28>)
    18b6:	885c      	ldrh	r4, [r3, #2]
    18b8:	0524      	lsls	r4, r4, #20
    18ba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <system_gclk_chan_get_hz+0x2c>)
    18be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    18c0:	0020      	movs	r0, r4
    18c2:	4b05      	ldr	r3, [pc, #20]	; (18d8 <system_gclk_chan_get_hz+0x30>)
    18c4:	4798      	blx	r3
}
    18c6:	bd10      	pop	{r4, pc}
    18c8:	000011c1 	.word	0x000011c1
    18cc:	40000c02 	.word	0x40000c02
    18d0:	40000c00 	.word	0x40000c00
    18d4:	00001201 	.word	0x00001201
    18d8:	00001775 	.word	0x00001775

000018dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18dc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18de:	78d3      	ldrb	r3, [r2, #3]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d135      	bne.n	1950 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18e4:	7813      	ldrb	r3, [r2, #0]
    18e6:	2b80      	cmp	r3, #128	; 0x80
    18e8:	d029      	beq.n	193e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18ea:	061b      	lsls	r3, r3, #24
    18ec:	2480      	movs	r4, #128	; 0x80
    18ee:	0264      	lsls	r4, r4, #9
    18f0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18f2:	7854      	ldrb	r4, [r2, #1]
    18f4:	2502      	movs	r5, #2
    18f6:	43ac      	bics	r4, r5
    18f8:	d106      	bne.n	1908 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    18fa:	7894      	ldrb	r4, [r2, #2]
    18fc:	2c00      	cmp	r4, #0
    18fe:	d120      	bne.n	1942 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1900:	2480      	movs	r4, #128	; 0x80
    1902:	02a4      	lsls	r4, r4, #10
    1904:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1906:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1908:	7854      	ldrb	r4, [r2, #1]
    190a:	3c01      	subs	r4, #1
    190c:	2c01      	cmp	r4, #1
    190e:	d91c      	bls.n	194a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1910:	040d      	lsls	r5, r1, #16
    1912:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1914:	24a0      	movs	r4, #160	; 0xa0
    1916:	05e4      	lsls	r4, r4, #23
    1918:	432c      	orrs	r4, r5
    191a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    191c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    191e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1920:	24d0      	movs	r4, #208	; 0xd0
    1922:	0624      	lsls	r4, r4, #24
    1924:	432c      	orrs	r4, r5
    1926:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1928:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    192a:	78d4      	ldrb	r4, [r2, #3]
    192c:	2c00      	cmp	r4, #0
    192e:	d122      	bne.n	1976 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1930:	035b      	lsls	r3, r3, #13
    1932:	d51c      	bpl.n	196e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1934:	7893      	ldrb	r3, [r2, #2]
    1936:	2b01      	cmp	r3, #1
    1938:	d01e      	beq.n	1978 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    193a:	6141      	str	r1, [r0, #20]
    193c:	e017      	b.n	196e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    193e:	2300      	movs	r3, #0
    1940:	e7d7      	b.n	18f2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1942:	24c0      	movs	r4, #192	; 0xc0
    1944:	02e4      	lsls	r4, r4, #11
    1946:	4323      	orrs	r3, r4
    1948:	e7dd      	b.n	1906 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    194a:	4c0d      	ldr	r4, [pc, #52]	; (1980 <_system_pinmux_config+0xa4>)
    194c:	4023      	ands	r3, r4
    194e:	e7df      	b.n	1910 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1950:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1952:	040c      	lsls	r4, r1, #16
    1954:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1956:	23a0      	movs	r3, #160	; 0xa0
    1958:	05db      	lsls	r3, r3, #23
    195a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    195c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    195e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1960:	23d0      	movs	r3, #208	; 0xd0
    1962:	061b      	lsls	r3, r3, #24
    1964:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1966:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1968:	78d3      	ldrb	r3, [r2, #3]
    196a:	2b00      	cmp	r3, #0
    196c:	d103      	bne.n	1976 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    196e:	7853      	ldrb	r3, [r2, #1]
    1970:	3b01      	subs	r3, #1
    1972:	2b01      	cmp	r3, #1
    1974:	d902      	bls.n	197c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1976:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1978:	6181      	str	r1, [r0, #24]
    197a:	e7f8      	b.n	196e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    197c:	6081      	str	r1, [r0, #8]
}
    197e:	e7fa      	b.n	1976 <_system_pinmux_config+0x9a>
    1980:	fffbffff 	.word	0xfffbffff

00001984 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1984:	b510      	push	{r4, lr}
    1986:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1988:	09c1      	lsrs	r1, r0, #7
		return NULL;
    198a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    198c:	2900      	cmp	r1, #0
    198e:	d104      	bne.n	199a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1990:	0943      	lsrs	r3, r0, #5
    1992:	01db      	lsls	r3, r3, #7
    1994:	4905      	ldr	r1, [pc, #20]	; (19ac <system_pinmux_pin_set_config+0x28>)
    1996:	468c      	mov	ip, r1
    1998:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    199a:	241f      	movs	r4, #31
    199c:	4020      	ands	r0, r4
    199e:	2101      	movs	r1, #1
    19a0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    19a2:	0018      	movs	r0, r3
    19a4:	4b02      	ldr	r3, [pc, #8]	; (19b0 <system_pinmux_pin_set_config+0x2c>)
    19a6:	4798      	blx	r3
}
    19a8:	bd10      	pop	{r4, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	41004400 	.word	0x41004400
    19b0:	000018dd 	.word	0x000018dd

000019b4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    19b4:	4770      	bx	lr
	...

000019b8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    19b8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    19ba:	4b05      	ldr	r3, [pc, #20]	; (19d0 <system_init+0x18>)
    19bc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    19be:	4b05      	ldr	r3, [pc, #20]	; (19d4 <system_init+0x1c>)
    19c0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_init+0x20>)
    19c4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <system_init+0x24>)
    19c8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    19ca:	4b05      	ldr	r3, [pc, #20]	; (19e0 <system_init+0x28>)
    19cc:	4798      	blx	r3
}
    19ce:	bd10      	pop	{r4, pc}
    19d0:	00001501 	.word	0x00001501
    19d4:	00001231 	.word	0x00001231
    19d8:	000019b5 	.word	0x000019b5
    19dc:	000019b5 	.word	0x000019b5
    19e0:	000019b5 	.word	0x000019b5

000019e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    19e4:	e7fe      	b.n	19e4 <Dummy_Handler>
	...

000019e8 <Reset_Handler>:
{
    19e8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    19ea:	4a26      	ldr	r2, [pc, #152]	; (1a84 <Reset_Handler+0x9c>)
    19ec:	4b26      	ldr	r3, [pc, #152]	; (1a88 <Reset_Handler+0xa0>)
    19ee:	429a      	cmp	r2, r3
    19f0:	d011      	beq.n	1a16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    19f2:	001a      	movs	r2, r3
    19f4:	4b25      	ldr	r3, [pc, #148]	; (1a8c <Reset_Handler+0xa4>)
    19f6:	429a      	cmp	r2, r3
    19f8:	d20d      	bcs.n	1a16 <Reset_Handler+0x2e>
    19fa:	4a25      	ldr	r2, [pc, #148]	; (1a90 <Reset_Handler+0xa8>)
    19fc:	3303      	adds	r3, #3
    19fe:	1a9b      	subs	r3, r3, r2
    1a00:	089b      	lsrs	r3, r3, #2
    1a02:	3301      	adds	r3, #1
    1a04:	009b      	lsls	r3, r3, #2
    1a06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1a08:	481f      	ldr	r0, [pc, #124]	; (1a88 <Reset_Handler+0xa0>)
    1a0a:	491e      	ldr	r1, [pc, #120]	; (1a84 <Reset_Handler+0x9c>)
    1a0c:	588c      	ldr	r4, [r1, r2]
    1a0e:	5084      	str	r4, [r0, r2]
    1a10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1a12:	429a      	cmp	r2, r3
    1a14:	d1fa      	bne.n	1a0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1a16:	4a1f      	ldr	r2, [pc, #124]	; (1a94 <Reset_Handler+0xac>)
    1a18:	4b1f      	ldr	r3, [pc, #124]	; (1a98 <Reset_Handler+0xb0>)
    1a1a:	429a      	cmp	r2, r3
    1a1c:	d20a      	bcs.n	1a34 <Reset_Handler+0x4c>
    1a1e:	43d3      	mvns	r3, r2
    1a20:	491d      	ldr	r1, [pc, #116]	; (1a98 <Reset_Handler+0xb0>)
    1a22:	185b      	adds	r3, r3, r1
    1a24:	2103      	movs	r1, #3
    1a26:	438b      	bics	r3, r1
    1a28:	3304      	adds	r3, #4
    1a2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1a2c:	2100      	movs	r1, #0
    1a2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1a30:	4293      	cmp	r3, r2
    1a32:	d1fc      	bne.n	1a2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1a34:	4a19      	ldr	r2, [pc, #100]	; (1a9c <Reset_Handler+0xb4>)
    1a36:	21ff      	movs	r1, #255	; 0xff
    1a38:	4b19      	ldr	r3, [pc, #100]	; (1aa0 <Reset_Handler+0xb8>)
    1a3a:	438b      	bics	r3, r1
    1a3c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1a3e:	39fd      	subs	r1, #253	; 0xfd
    1a40:	2390      	movs	r3, #144	; 0x90
    1a42:	005b      	lsls	r3, r3, #1
    1a44:	4a17      	ldr	r2, [pc, #92]	; (1aa4 <Reset_Handler+0xbc>)
    1a46:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1a48:	4b17      	ldr	r3, [pc, #92]	; (1aa8 <Reset_Handler+0xc0>)
    1a4a:	7b9a      	ldrb	r2, [r3, #14]
    1a4c:	312e      	adds	r1, #46	; 0x2e
    1a4e:	438a      	bics	r2, r1
    1a50:	2120      	movs	r1, #32
    1a52:	430a      	orrs	r2, r1
    1a54:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1a56:	7b9a      	ldrb	r2, [r3, #14]
    1a58:	210c      	movs	r1, #12
    1a5a:	438a      	bics	r2, r1
    1a5c:	2108      	movs	r1, #8
    1a5e:	430a      	orrs	r2, r1
    1a60:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1a62:	7b9a      	ldrb	r2, [r3, #14]
    1a64:	2103      	movs	r1, #3
    1a66:	438a      	bics	r2, r1
    1a68:	2102      	movs	r1, #2
    1a6a:	430a      	orrs	r2, r1
    1a6c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1a6e:	4a0f      	ldr	r2, [pc, #60]	; (1aac <Reset_Handler+0xc4>)
    1a70:	6853      	ldr	r3, [r2, #4]
    1a72:	2180      	movs	r1, #128	; 0x80
    1a74:	430b      	orrs	r3, r1
    1a76:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1a78:	4b0d      	ldr	r3, [pc, #52]	; (1ab0 <Reset_Handler+0xc8>)
    1a7a:	4798      	blx	r3
        main();
    1a7c:	4b0d      	ldr	r3, [pc, #52]	; (1ab4 <Reset_Handler+0xcc>)
    1a7e:	4798      	blx	r3
    1a80:	e7fe      	b.n	1a80 <Reset_Handler+0x98>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00002170 	.word	0x00002170
    1a88:	20000000 	.word	0x20000000
    1a8c:	2000000c 	.word	0x2000000c
    1a90:	20000004 	.word	0x20000004
    1a94:	2000000c 	.word	0x2000000c
    1a98:	20000068 	.word	0x20000068
    1a9c:	e000ed00 	.word	0xe000ed00
    1aa0:	00000000 	.word	0x00000000
    1aa4:	41007000 	.word	0x41007000
    1aa8:	41004800 	.word	0x41004800
    1aac:	41004000 	.word	0x41004000
    1ab0:	00001e99 	.word	0x00001e99
    1ab4:	00001bb5 	.word	0x00001bb5

00001ab8 <configure_usart>:
// 	}
// 	usart_enable(&usart_instance);
// }

void configure_usart(void)
{
    1ab8:	b530      	push	{r4, r5, lr}
    1aba:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1abc:	2380      	movs	r3, #128	; 0x80
    1abe:	05db      	lsls	r3, r3, #23
    1ac0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1ac2:	2300      	movs	r3, #0
    1ac4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1ac6:	22ff      	movs	r2, #255	; 0xff
    1ac8:	4669      	mov	r1, sp
    1aca:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1acc:	2200      	movs	r2, #0
    1ace:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1ad0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1ad2:	2196      	movs	r1, #150	; 0x96
    1ad4:	0189      	lsls	r1, r1, #6
    1ad6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1ad8:	2101      	movs	r1, #1
    1ada:	2024      	movs	r0, #36	; 0x24
    1adc:	466c      	mov	r4, sp
    1ade:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1ae0:	3001      	adds	r0, #1
    1ae2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1ae4:	3125      	adds	r1, #37	; 0x25
    1ae6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1ae8:	3101      	adds	r1, #1
    1aea:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1aec:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1aee:	3105      	adds	r1, #5
    1af0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1af2:	3101      	adds	r1, #1
    1af4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1af6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1af8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1afa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1afc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1afe:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1b00:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1b02:	2313      	movs	r3, #19
    1b04:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1b06:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 9600;
	config_usart.mux_setting = CONF_USART_MUX_SETTING;
    1b08:	2380      	movs	r3, #128	; 0x80
    1b0a:	035b      	lsls	r3, r3, #13
    1b0c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = CONF_USART_PINMUX_PAD0; // TX
    1b0e:	4b0d      	ldr	r3, [pc, #52]	; (1b44 <configure_usart+0x8c>)
    1b10:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = CONF_USART_PINMUX_PAD1; // RX
    1b12:	4b0d      	ldr	r3, [pc, #52]	; (1b48 <configure_usart+0x90>)
    1b14:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = CONF_USART_PINMUX_PAD2; // unused
    1b16:	2301      	movs	r3, #1
    1b18:	425b      	negs	r3, r3
    1b1a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = CONF_USART_PINMUX_PAD3; // unused
    1b1c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    1b1e:	4d0b      	ldr	r5, [pc, #44]	; (1b4c <configure_usart+0x94>)
    1b20:	4c0b      	ldr	r4, [pc, #44]	; (1b50 <configure_usart+0x98>)
    1b22:	466a      	mov	r2, sp
    1b24:	490b      	ldr	r1, [pc, #44]	; (1b54 <configure_usart+0x9c>)
    1b26:	0028      	movs	r0, r5
    1b28:	47a0      	blx	r4
    1b2a:	2800      	cmp	r0, #0
    1b2c:	d1f9      	bne.n	1b22 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b2e:	4b07      	ldr	r3, [pc, #28]	; (1b4c <configure_usart+0x94>)
    1b30:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b34:	2b00      	cmp	r3, #0
    1b36:	d1fc      	bne.n	1b32 <configure_usart+0x7a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b38:	6813      	ldr	r3, [r2, #0]
    1b3a:	2102      	movs	r1, #2
    1b3c:	430b      	orrs	r3, r1
    1b3e:	6013      	str	r3, [r2, #0]
	CONF_USART_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    1b40:	b011      	add	sp, #68	; 0x44
    1b42:	bd30      	pop	{r4, r5, pc}
    1b44:	000e0003 	.word	0x000e0003
    1b48:	000f0003 	.word	0x000f0003
    1b4c:	2000005c 	.word	0x2000005c
    1b50:	00000621 	.word	0x00000621
    1b54:	42001000 	.word	0x42001000

00001b58 <process_numbers>:


void process_numbers(int* num_array, char* buffer, char* charBuf){
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	b083      	sub	sp, #12
    1b5c:	9201      	str	r2, [sp, #4]
	int j = 0,i=0;
	while(buffer[i]!=')'){
    1b5e:	780c      	ldrb	r4, [r1, #0]
    1b60:	2c29      	cmp	r4, #41	; 0x29
    1b62:	d024      	beq.n	1bae <process_numbers+0x56>
    1b64:	2600      	movs	r6, #0
    1b66:	2700      	movs	r7, #0
    1b68:	e006      	b.n	1b78 <process_numbers+0x20>
		if(buffer[i]==','){
			j++;
    1b6a:	3701      	adds	r7, #1
			if(j==5){
    1b6c:	2f05      	cmp	r7, #5
    1b6e:	d011      	beq.n	1b94 <process_numbers+0x3c>
// 			}
// 		}
		else{
			num_array[j]=num_array[j]*10+buffer[i]-'0';
		}
		i++;
    1b70:	3601      	adds	r6, #1
	while(buffer[i]!=')'){
    1b72:	5d8c      	ldrb	r4, [r1, r6]
    1b74:	2c29      	cmp	r4, #41	; 0x29
    1b76:	d01a      	beq.n	1bae <process_numbers+0x56>
		if(buffer[i]==','){
    1b78:	2c2c      	cmp	r4, #44	; 0x2c
    1b7a:	d0f6      	beq.n	1b6a <process_numbers+0x12>
			num_array[j]=num_array[j]*10+buffer[i]-'0';
    1b7c:	00bd      	lsls	r5, r7, #2
    1b7e:	1945      	adds	r5, r0, r5
    1b80:	682b      	ldr	r3, [r5, #0]
    1b82:	009b      	lsls	r3, r3, #2
    1b84:	682a      	ldr	r2, [r5, #0]
    1b86:	4694      	mov	ip, r2
    1b88:	4463      	add	r3, ip
    1b8a:	005b      	lsls	r3, r3, #1
    1b8c:	191b      	adds	r3, r3, r4
    1b8e:	3b30      	subs	r3, #48	; 0x30
    1b90:	602b      	str	r3, [r5, #0]
    1b92:	e7ed      	b.n	1b70 <process_numbers+0x18>
				while(buffer[i]!=')'){
    1b94:	198b      	adds	r3, r1, r6
    1b96:	785b      	ldrb	r3, [r3, #1]
    1b98:	2b29      	cmp	r3, #41	; 0x29
    1b9a:	d008      	beq.n	1bae <process_numbers+0x56>
    1b9c:	9a01      	ldr	r2, [sp, #4]
    1b9e:	3602      	adds	r6, #2
    1ba0:	198e      	adds	r6, r1, r6
					charBuf[k]=buffer[i];
    1ba2:	7013      	strb	r3, [r2, #0]
				while(buffer[i]!=')'){
    1ba4:	7833      	ldrb	r3, [r6, #0]
    1ba6:	3201      	adds	r2, #1
    1ba8:	3601      	adds	r6, #1
    1baa:	2b29      	cmp	r3, #41	; 0x29
    1bac:	d1f9      	bne.n	1ba2 <process_numbers+0x4a>
	}
}
    1bae:	b003      	add	sp, #12
    1bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001bb4 <main>:

int main (void)
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb6:	46ce      	mov	lr, r9
    1bb8:	4647      	mov	r7, r8
    1bba:	b580      	push	{r7, lr}
    1bbc:	b0b7      	sub	sp, #220	; 0xdc
	//uint16_t txBuf[20];
	uint8_t rxBuf[50];
	char charBuf[50];
	system_init();
    1bbe:	4b48      	ldr	r3, [pc, #288]	; (1ce0 <main+0x12c>)
    1bc0:	4798      	blx	r3
	delay_init();
    1bc2:	4b48      	ldr	r3, [pc, #288]	; (1ce4 <main+0x130>)
    1bc4:	4798      	blx	r3
	configure_usart();
    1bc6:	4b48      	ldr	r3, [pc, #288]	; (1ce8 <main+0x134>)
    1bc8:	4798      	blx	r3
 	configure_port_pins();
    1bca:	4b48      	ldr	r3, [pc, #288]	; (1cec <main+0x138>)
    1bcc:	4798      	blx	r3
	configure_spi_master();
    1bce:	4b48      	ldr	r3, [pc, #288]	; (1cf0 <main+0x13c>)
    1bd0:	4798      	blx	r3
	LCD_init();
    1bd2:	4b48      	ldr	r3, [pc, #288]	; (1cf4 <main+0x140>)
    1bd4:	4798      	blx	r3
// 	delay_s(1);
// 	LCD_clearScreen(RED);
// 	delay_s(1);
// 	LCD_clearScreen(GREEN);
// 	delay_s(1);
	LCD_clearScreen(BLACK);
    1bd6:	2000      	movs	r0, #0
    1bd8:	4b47      	ldr	r3, [pc, #284]	; (1cf8 <main+0x144>)
    1bda:	4798      	blx	r3
	uint8_t string[] = "Hello World!\r\n";
    1bdc:	a918      	add	r1, sp, #96	; 0x60
    1bde:	4b47      	ldr	r3, [pc, #284]	; (1cfc <main+0x148>)
    1be0:	000a      	movs	r2, r1
    1be2:	cb31      	ldmia	r3!, {r0, r4, r5}
    1be4:	c231      	stmia	r2!, {r0, r4, r5}
    1be6:	8818      	ldrh	r0, [r3, #0]
    1be8:	8010      	strh	r0, [r2, #0]
    1bea:	789b      	ldrb	r3, [r3, #2]
    1bec:	7093      	strb	r3, [r2, #2]
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1bee:	220f      	movs	r2, #15
    1bf0:	4843      	ldr	r0, [pc, #268]	; (1d00 <main+0x14c>)
    1bf2:	4b44      	ldr	r3, [pc, #272]	; (1d04 <main+0x150>)
    1bf4:	4798      	blx	r3
	uint16_t temp;
	uint16_t counter;
	counter = 0;
    1bf6:	2300      	movs	r3, #0
    1bf8:	4699      	mov	r9, r3
// 			 			    }
		while(1){
			if (counter>50){
				counter = 0;
			}
			while(usart_read_wait(&usart_instance, &temp)!=STATUS_OK){;}
    1bfa:	245e      	movs	r4, #94	; 0x5e
    1bfc:	446c      	add	r4, sp
    1bfe:	4e40      	ldr	r6, [pc, #256]	; (1d00 <main+0x14c>)
    1c00:	4d41      	ldr	r5, [pc, #260]	; (1d08 <main+0x154>)
    1c02:	e026      	b.n	1c52 <main+0x9e>
			rxBuf[counter]=(uint8_t) temp;
			if(rxBuf[counter]==')'){  
				// we can read information here
				
					// list of commands
				process_numbers(&number_array,&rxBuf,&charBuf);
    1c04:	aa1c      	add	r2, sp, #112	; 0x70
    1c06:	a929      	add	r1, sp, #164	; 0xa4
    1c08:	a803      	add	r0, sp, #12
    1c0a:	4b40      	ldr	r3, [pc, #256]	; (1d0c <main+0x158>)
    1c0c:	4798      	blx	r3
				switch(number_array[0]){
    1c0e:	9b03      	ldr	r3, [sp, #12]
    1c10:	2b06      	cmp	r3, #6
    1c12:	d809      	bhi.n	1c28 <main+0x74>
    1c14:	009b      	lsls	r3, r3, #2
    1c16:	4a3e      	ldr	r2, [pc, #248]	; (1d10 <main+0x15c>)
    1c18:	58d3      	ldr	r3, [r2, r3]
    1c1a:	469f      	mov	pc, r3
					case 1:
						LCD_drawXLine(number_array[1],number_array[2]);
    1c1c:	ab03      	add	r3, sp, #12
    1c1e:	9905      	ldr	r1, [sp, #20]
    1c20:	2004      	movs	r0, #4
    1c22:	5e18      	ldrsh	r0, [r3, r0]
    1c24:	4b3b      	ldr	r3, [pc, #236]	; (1d14 <main+0x160>)
    1c26:	4798      	blx	r3
				}
				//number_array[0]=1;
				//number_array[1]=2;
				//drawChar(0,20,number_array[0]+'0',WHITE,BLACK);
				//drawChar(0,30,number_array[1]+'0',WHITE,BLACK);
				memset(number_array,0,sizeof(number_array)); // change everything to zero.
    1c28:	2250      	movs	r2, #80	; 0x50
    1c2a:	2100      	movs	r1, #0
    1c2c:	a803      	add	r0, sp, #12
    1c2e:	4b3a      	ldr	r3, [pc, #232]	; (1d18 <main+0x164>)
    1c30:	4698      	mov	r8, r3
    1c32:	4798      	blx	r3
				memset(charBuf,0,sizeof(charBuf));
    1c34:	2232      	movs	r2, #50	; 0x32
    1c36:	2100      	movs	r1, #0
    1c38:	a81c      	add	r0, sp, #112	; 0x70
    1c3a:	47c0      	blx	r8
				usart_write_buffer_wait(&usart_instance, &rxBuf,counter);
    1c3c:	464a      	mov	r2, r9
    1c3e:	a929      	add	r1, sp, #164	; 0xa4
    1c40:	482f      	ldr	r0, [pc, #188]	; (1d00 <main+0x14c>)
    1c42:	4b30      	ldr	r3, [pc, #192]	; (1d04 <main+0x150>)
    1c44:	4798      	blx	r3
				memset(rxBuf,0,sizeof(rxBuf));
    1c46:	2232      	movs	r2, #50	; 0x32
    1c48:	2100      	movs	r1, #0
    1c4a:	a829      	add	r0, sp, #164	; 0xa4
    1c4c:	47c0      	blx	r8
// 					drawChar(0,somenum,number_array[i],WHITE,BLACK);
// 				}
				
				
				//drawString(0,10,&rxBuf,WHITE,BLACK);
				counter = 0;
    1c4e:	2300      	movs	r3, #0
    1c50:	4699      	mov	r9, r3
			while(usart_read_wait(&usart_instance, &temp)!=STATUS_OK){;}
    1c52:	0021      	movs	r1, r4
    1c54:	0030      	movs	r0, r6
    1c56:	47a8      	blx	r5
    1c58:	2800      	cmp	r0, #0
    1c5a:	d1fa      	bne.n	1c52 <main+0x9e>
			rxBuf[counter]=(uint8_t) temp;
    1c5c:	7823      	ldrb	r3, [r4, #0]
    1c5e:	aa29      	add	r2, sp, #164	; 0xa4
    1c60:	4649      	mov	r1, r9
    1c62:	5453      	strb	r3, [r2, r1]
			if(rxBuf[counter]==')'){  
    1c64:	2b29      	cmp	r3, #41	; 0x29
    1c66:	d0cd      	beq.n	1c04 <main+0x50>
			}
			else{
				counter++;
    1c68:	464f      	mov	r7, r9
    1c6a:	3701      	adds	r7, #1
    1c6c:	b2bb      	uxth	r3, r7
    1c6e:	4699      	mov	r9, r3
			if (counter>50){
    1c70:	2b32      	cmp	r3, #50	; 0x32
    1c72:	d9ee      	bls.n	1c52 <main+0x9e>
				counter = 0;
    1c74:	2300      	movs	r3, #0
    1c76:	4699      	mov	r9, r3
    1c78:	e7eb      	b.n	1c52 <main+0x9e>
						LCD_drawYLine(number_array[1],number_array[2]);
    1c7a:	ab03      	add	r3, sp, #12
    1c7c:	9905      	ldr	r1, [sp, #20]
    1c7e:	2004      	movs	r0, #4
    1c80:	5e18      	ldrsh	r0, [r3, r0]
    1c82:	4b26      	ldr	r3, [pc, #152]	; (1d1c <main+0x168>)
    1c84:	4798      	blx	r3
						break;
    1c86:	e7cf      	b.n	1c28 <main+0x74>
						drawChar(number_array[1], number_array[2], (unsigned char)charBuf[0], number_array[3], number_array[4]);
    1c88:	ab03      	add	r3, sp, #12
    1c8a:	210c      	movs	r1, #12
    1c8c:	5e5a      	ldrsh	r2, [r3, r1]
    1c8e:	4694      	mov	ip, r2
    1c90:	aa1c      	add	r2, sp, #112	; 0x70
    1c92:	7812      	ldrb	r2, [r2, #0]
    1c94:	2008      	movs	r0, #8
    1c96:	5e19      	ldrsh	r1, [r3, r0]
    1c98:	2704      	movs	r7, #4
    1c9a:	5fd8      	ldrsh	r0, [r3, r7]
    1c9c:	2710      	movs	r7, #16
    1c9e:	5fdb      	ldrsh	r3, [r3, r7]
    1ca0:	9300      	str	r3, [sp, #0]
    1ca2:	4663      	mov	r3, ip
    1ca4:	4f1e      	ldr	r7, [pc, #120]	; (1d20 <main+0x16c>)
    1ca6:	47b8      	blx	r7
						break;
    1ca8:	e7be      	b.n	1c28 <main+0x74>
						drawString(number_array[1], number_array[2], &charBuf, number_array[3], number_array[4]);
    1caa:	aa03      	add	r2, sp, #12
    1cac:	210c      	movs	r1, #12
    1cae:	5e53      	ldrsh	r3, [r2, r1]
    1cb0:	2008      	movs	r0, #8
    1cb2:	5e11      	ldrsh	r1, [r2, r0]
    1cb4:	2704      	movs	r7, #4
    1cb6:	5fd0      	ldrsh	r0, [r2, r7]
    1cb8:	2710      	movs	r7, #16
    1cba:	5fd2      	ldrsh	r2, [r2, r7]
    1cbc:	9200      	str	r2, [sp, #0]
    1cbe:	aa1c      	add	r2, sp, #112	; 0x70
    1cc0:	4f18      	ldr	r7, [pc, #96]	; (1d24 <main+0x170>)
    1cc2:	47b8      	blx	r7
						break;
    1cc4:	e7b0      	b.n	1c28 <main+0x74>
						LCD_clearScreen(number_array[1]);
    1cc6:	466b      	mov	r3, sp
    1cc8:	8a18      	ldrh	r0, [r3, #16]
    1cca:	4b0b      	ldr	r3, [pc, #44]	; (1cf8 <main+0x144>)
    1ccc:	4798      	blx	r3
						break;
    1cce:	e7ab      	b.n	1c28 <main+0x74>
						LCD_drawPixel(number_array[1],number_array[2],number_array[3]);
    1cd0:	ab03      	add	r3, sp, #12
    1cd2:	899a      	ldrh	r2, [r3, #12]
    1cd4:	8919      	ldrh	r1, [r3, #8]
    1cd6:	8898      	ldrh	r0, [r3, #4]
    1cd8:	4b13      	ldr	r3, [pc, #76]	; (1d28 <main+0x174>)
    1cda:	4798      	blx	r3
    1cdc:	e7a4      	b.n	1c28 <main+0x74>
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	000019b9 	.word	0x000019b9
    1ce4:	00000a71 	.word	0x00000a71
    1ce8:	00001ab9 	.word	0x00001ab9
    1cec:	000000ed 	.word	0x000000ed
    1cf0:	0000010d 	.word	0x0000010d
    1cf4:	000002ad 	.word	0x000002ad
    1cf8:	000005f5 	.word	0x000005f5
    1cfc:	00002140 	.word	0x00002140
    1d00:	2000005c 	.word	0x2000005c
    1d04:	000009b1 	.word	0x000009b1
    1d08:	00000947 	.word	0x00000947
    1d0c:	00001b59 	.word	0x00001b59
    1d10:	00002124 	.word	0x00002124
    1d14:	000004f1 	.word	0x000004f1
    1d18:	00001ee1 	.word	0x00001ee1
    1d1c:	000004d1 	.word	0x000004d1
    1d20:	00000511 	.word	0x00000511
    1d24:	000005b9 	.word	0x000005b9
    1d28:	000004b1 	.word	0x000004b1

00001d2c <__udivsi3>:
    1d2c:	2200      	movs	r2, #0
    1d2e:	0843      	lsrs	r3, r0, #1
    1d30:	428b      	cmp	r3, r1
    1d32:	d374      	bcc.n	1e1e <__udivsi3+0xf2>
    1d34:	0903      	lsrs	r3, r0, #4
    1d36:	428b      	cmp	r3, r1
    1d38:	d35f      	bcc.n	1dfa <__udivsi3+0xce>
    1d3a:	0a03      	lsrs	r3, r0, #8
    1d3c:	428b      	cmp	r3, r1
    1d3e:	d344      	bcc.n	1dca <__udivsi3+0x9e>
    1d40:	0b03      	lsrs	r3, r0, #12
    1d42:	428b      	cmp	r3, r1
    1d44:	d328      	bcc.n	1d98 <__udivsi3+0x6c>
    1d46:	0c03      	lsrs	r3, r0, #16
    1d48:	428b      	cmp	r3, r1
    1d4a:	d30d      	bcc.n	1d68 <__udivsi3+0x3c>
    1d4c:	22ff      	movs	r2, #255	; 0xff
    1d4e:	0209      	lsls	r1, r1, #8
    1d50:	ba12      	rev	r2, r2
    1d52:	0c03      	lsrs	r3, r0, #16
    1d54:	428b      	cmp	r3, r1
    1d56:	d302      	bcc.n	1d5e <__udivsi3+0x32>
    1d58:	1212      	asrs	r2, r2, #8
    1d5a:	0209      	lsls	r1, r1, #8
    1d5c:	d065      	beq.n	1e2a <__udivsi3+0xfe>
    1d5e:	0b03      	lsrs	r3, r0, #12
    1d60:	428b      	cmp	r3, r1
    1d62:	d319      	bcc.n	1d98 <__udivsi3+0x6c>
    1d64:	e000      	b.n	1d68 <__udivsi3+0x3c>
    1d66:	0a09      	lsrs	r1, r1, #8
    1d68:	0bc3      	lsrs	r3, r0, #15
    1d6a:	428b      	cmp	r3, r1
    1d6c:	d301      	bcc.n	1d72 <__udivsi3+0x46>
    1d6e:	03cb      	lsls	r3, r1, #15
    1d70:	1ac0      	subs	r0, r0, r3
    1d72:	4152      	adcs	r2, r2
    1d74:	0b83      	lsrs	r3, r0, #14
    1d76:	428b      	cmp	r3, r1
    1d78:	d301      	bcc.n	1d7e <__udivsi3+0x52>
    1d7a:	038b      	lsls	r3, r1, #14
    1d7c:	1ac0      	subs	r0, r0, r3
    1d7e:	4152      	adcs	r2, r2
    1d80:	0b43      	lsrs	r3, r0, #13
    1d82:	428b      	cmp	r3, r1
    1d84:	d301      	bcc.n	1d8a <__udivsi3+0x5e>
    1d86:	034b      	lsls	r3, r1, #13
    1d88:	1ac0      	subs	r0, r0, r3
    1d8a:	4152      	adcs	r2, r2
    1d8c:	0b03      	lsrs	r3, r0, #12
    1d8e:	428b      	cmp	r3, r1
    1d90:	d301      	bcc.n	1d96 <__udivsi3+0x6a>
    1d92:	030b      	lsls	r3, r1, #12
    1d94:	1ac0      	subs	r0, r0, r3
    1d96:	4152      	adcs	r2, r2
    1d98:	0ac3      	lsrs	r3, r0, #11
    1d9a:	428b      	cmp	r3, r1
    1d9c:	d301      	bcc.n	1da2 <__udivsi3+0x76>
    1d9e:	02cb      	lsls	r3, r1, #11
    1da0:	1ac0      	subs	r0, r0, r3
    1da2:	4152      	adcs	r2, r2
    1da4:	0a83      	lsrs	r3, r0, #10
    1da6:	428b      	cmp	r3, r1
    1da8:	d301      	bcc.n	1dae <__udivsi3+0x82>
    1daa:	028b      	lsls	r3, r1, #10
    1dac:	1ac0      	subs	r0, r0, r3
    1dae:	4152      	adcs	r2, r2
    1db0:	0a43      	lsrs	r3, r0, #9
    1db2:	428b      	cmp	r3, r1
    1db4:	d301      	bcc.n	1dba <__udivsi3+0x8e>
    1db6:	024b      	lsls	r3, r1, #9
    1db8:	1ac0      	subs	r0, r0, r3
    1dba:	4152      	adcs	r2, r2
    1dbc:	0a03      	lsrs	r3, r0, #8
    1dbe:	428b      	cmp	r3, r1
    1dc0:	d301      	bcc.n	1dc6 <__udivsi3+0x9a>
    1dc2:	020b      	lsls	r3, r1, #8
    1dc4:	1ac0      	subs	r0, r0, r3
    1dc6:	4152      	adcs	r2, r2
    1dc8:	d2cd      	bcs.n	1d66 <__udivsi3+0x3a>
    1dca:	09c3      	lsrs	r3, r0, #7
    1dcc:	428b      	cmp	r3, r1
    1dce:	d301      	bcc.n	1dd4 <__udivsi3+0xa8>
    1dd0:	01cb      	lsls	r3, r1, #7
    1dd2:	1ac0      	subs	r0, r0, r3
    1dd4:	4152      	adcs	r2, r2
    1dd6:	0983      	lsrs	r3, r0, #6
    1dd8:	428b      	cmp	r3, r1
    1dda:	d301      	bcc.n	1de0 <__udivsi3+0xb4>
    1ddc:	018b      	lsls	r3, r1, #6
    1dde:	1ac0      	subs	r0, r0, r3
    1de0:	4152      	adcs	r2, r2
    1de2:	0943      	lsrs	r3, r0, #5
    1de4:	428b      	cmp	r3, r1
    1de6:	d301      	bcc.n	1dec <__udivsi3+0xc0>
    1de8:	014b      	lsls	r3, r1, #5
    1dea:	1ac0      	subs	r0, r0, r3
    1dec:	4152      	adcs	r2, r2
    1dee:	0903      	lsrs	r3, r0, #4
    1df0:	428b      	cmp	r3, r1
    1df2:	d301      	bcc.n	1df8 <__udivsi3+0xcc>
    1df4:	010b      	lsls	r3, r1, #4
    1df6:	1ac0      	subs	r0, r0, r3
    1df8:	4152      	adcs	r2, r2
    1dfa:	08c3      	lsrs	r3, r0, #3
    1dfc:	428b      	cmp	r3, r1
    1dfe:	d301      	bcc.n	1e04 <__udivsi3+0xd8>
    1e00:	00cb      	lsls	r3, r1, #3
    1e02:	1ac0      	subs	r0, r0, r3
    1e04:	4152      	adcs	r2, r2
    1e06:	0883      	lsrs	r3, r0, #2
    1e08:	428b      	cmp	r3, r1
    1e0a:	d301      	bcc.n	1e10 <__udivsi3+0xe4>
    1e0c:	008b      	lsls	r3, r1, #2
    1e0e:	1ac0      	subs	r0, r0, r3
    1e10:	4152      	adcs	r2, r2
    1e12:	0843      	lsrs	r3, r0, #1
    1e14:	428b      	cmp	r3, r1
    1e16:	d301      	bcc.n	1e1c <__udivsi3+0xf0>
    1e18:	004b      	lsls	r3, r1, #1
    1e1a:	1ac0      	subs	r0, r0, r3
    1e1c:	4152      	adcs	r2, r2
    1e1e:	1a41      	subs	r1, r0, r1
    1e20:	d200      	bcs.n	1e24 <__udivsi3+0xf8>
    1e22:	4601      	mov	r1, r0
    1e24:	4152      	adcs	r2, r2
    1e26:	4610      	mov	r0, r2
    1e28:	4770      	bx	lr
    1e2a:	e7ff      	b.n	1e2c <__udivsi3+0x100>
    1e2c:	b501      	push	{r0, lr}
    1e2e:	2000      	movs	r0, #0
    1e30:	f000 f806 	bl	1e40 <__aeabi_idiv0>
    1e34:	bd02      	pop	{r1, pc}
    1e36:	46c0      	nop			; (mov r8, r8)

00001e38 <__aeabi_uidivmod>:
    1e38:	2900      	cmp	r1, #0
    1e3a:	d0f7      	beq.n	1e2c <__udivsi3+0x100>
    1e3c:	e776      	b.n	1d2c <__udivsi3>
    1e3e:	4770      	bx	lr

00001e40 <__aeabi_idiv0>:
    1e40:	4770      	bx	lr
    1e42:	46c0      	nop			; (mov r8, r8)

00001e44 <__aeabi_lmul>:
    1e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e46:	46ce      	mov	lr, r9
    1e48:	4647      	mov	r7, r8
    1e4a:	0415      	lsls	r5, r2, #16
    1e4c:	0c2d      	lsrs	r5, r5, #16
    1e4e:	002e      	movs	r6, r5
    1e50:	b580      	push	{r7, lr}
    1e52:	0407      	lsls	r7, r0, #16
    1e54:	0c14      	lsrs	r4, r2, #16
    1e56:	0c3f      	lsrs	r7, r7, #16
    1e58:	4699      	mov	r9, r3
    1e5a:	0c03      	lsrs	r3, r0, #16
    1e5c:	437e      	muls	r6, r7
    1e5e:	435d      	muls	r5, r3
    1e60:	4367      	muls	r7, r4
    1e62:	4363      	muls	r3, r4
    1e64:	197f      	adds	r7, r7, r5
    1e66:	0c34      	lsrs	r4, r6, #16
    1e68:	19e4      	adds	r4, r4, r7
    1e6a:	469c      	mov	ip, r3
    1e6c:	42a5      	cmp	r5, r4
    1e6e:	d903      	bls.n	1e78 <__aeabi_lmul+0x34>
    1e70:	2380      	movs	r3, #128	; 0x80
    1e72:	025b      	lsls	r3, r3, #9
    1e74:	4698      	mov	r8, r3
    1e76:	44c4      	add	ip, r8
    1e78:	464b      	mov	r3, r9
    1e7a:	4351      	muls	r1, r2
    1e7c:	4343      	muls	r3, r0
    1e7e:	0436      	lsls	r6, r6, #16
    1e80:	0c36      	lsrs	r6, r6, #16
    1e82:	0c25      	lsrs	r5, r4, #16
    1e84:	0424      	lsls	r4, r4, #16
    1e86:	4465      	add	r5, ip
    1e88:	19a4      	adds	r4, r4, r6
    1e8a:	1859      	adds	r1, r3, r1
    1e8c:	1949      	adds	r1, r1, r5
    1e8e:	0020      	movs	r0, r4
    1e90:	bc0c      	pop	{r2, r3}
    1e92:	4690      	mov	r8, r2
    1e94:	4699      	mov	r9, r3
    1e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e98 <__libc_init_array>:
    1e98:	b570      	push	{r4, r5, r6, lr}
    1e9a:	2600      	movs	r6, #0
    1e9c:	4d0c      	ldr	r5, [pc, #48]	; (1ed0 <__libc_init_array+0x38>)
    1e9e:	4c0d      	ldr	r4, [pc, #52]	; (1ed4 <__libc_init_array+0x3c>)
    1ea0:	1b64      	subs	r4, r4, r5
    1ea2:	10a4      	asrs	r4, r4, #2
    1ea4:	42a6      	cmp	r6, r4
    1ea6:	d109      	bne.n	1ebc <__libc_init_array+0x24>
    1ea8:	2600      	movs	r6, #0
    1eaa:	f000 f951 	bl	2150 <_init>
    1eae:	4d0a      	ldr	r5, [pc, #40]	; (1ed8 <__libc_init_array+0x40>)
    1eb0:	4c0a      	ldr	r4, [pc, #40]	; (1edc <__libc_init_array+0x44>)
    1eb2:	1b64      	subs	r4, r4, r5
    1eb4:	10a4      	asrs	r4, r4, #2
    1eb6:	42a6      	cmp	r6, r4
    1eb8:	d105      	bne.n	1ec6 <__libc_init_array+0x2e>
    1eba:	bd70      	pop	{r4, r5, r6, pc}
    1ebc:	00b3      	lsls	r3, r6, #2
    1ebe:	58eb      	ldr	r3, [r5, r3]
    1ec0:	4798      	blx	r3
    1ec2:	3601      	adds	r6, #1
    1ec4:	e7ee      	b.n	1ea4 <__libc_init_array+0xc>
    1ec6:	00b3      	lsls	r3, r6, #2
    1ec8:	58eb      	ldr	r3, [r5, r3]
    1eca:	4798      	blx	r3
    1ecc:	3601      	adds	r6, #1
    1ece:	e7f2      	b.n	1eb6 <__libc_init_array+0x1e>
    1ed0:	0000215c 	.word	0x0000215c
    1ed4:	0000215c 	.word	0x0000215c
    1ed8:	0000215c 	.word	0x0000215c
    1edc:	00002160 	.word	0x00002160

00001ee0 <memset>:
    1ee0:	0003      	movs	r3, r0
    1ee2:	1882      	adds	r2, r0, r2
    1ee4:	4293      	cmp	r3, r2
    1ee6:	d100      	bne.n	1eea <memset+0xa>
    1ee8:	4770      	bx	lr
    1eea:	7019      	strb	r1, [r3, #0]
    1eec:	3301      	adds	r3, #1
    1eee:	e7f9      	b.n	1ee4 <memset+0x4>

00001ef0 <ASCII>:
    1ef0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    1f00:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    1f10:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    1f20:	001c 0814 083e 0814 3e08 0808 5000 0030     ....>....>...P0.
    1f30:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    1f40:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    1f50:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    1f60:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    1f70:	1e29 3600 0036 0000 3656 0000 1408 4122     )..66...V6...."A
    1f80:	1400 1414 1414 4100 1422 0208 5101 0609     .......A"....Q..
    1f90:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    1fa0:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    1fb0:	0909 3e01 4941 7a49 087f 0808 007f 7f41     ...>AIIz......A.
    1fc0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    1fd0:	7f40 0c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    1fe0:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    1ff0:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    2000:	2040 3f1f 3840 3f40 1463 1408 0763 7008     @ .?@8@?c...c..p
    2010:	0708 5161 4549 0043 417f 0041 0402 1008     ..aQIEC..AA.....
    2020:	0020 4141 007f 0204 0201 4004 4040 4040      .AA.......@@@@@
    2030:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    2040:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2050:	0109 0c02 5252 3e52 087f 0404 0078 7d44     ....RRR>....x.D}
    2060:	0040 4020 3d44 7f00 2810 0044 4100 407f     @. @D=...(D..A.@
    2070:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2080:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    2090:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    20a0:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    20b0:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    20c0:	0000 3641 0008 0810 1008 0008 0906 0609     ..A6............
    20d0:	0800 4200 0c00 4200 1000 4200 129e 0000     ...B...B...B....
    20e0:	129a 0000 129a 0000 1300 0000 1300 0000     ................
    20f0:	12b2 0000 12a4 0000 12b8 0000 12ee 0000     ................
    2100:	1484 0000 1464 0000 1464 0000 14f0 0000     ....d...d.......
    2110:	1476 0000 1492 0000 1468 0000 14a0 0000     v.......h.......
    2120:	14e0 0000 1c28 0000 1c1c 0000 1c7a 0000     ....(.......z...
    2130:	1c88 0000 1caa 0000 1cc6 0000 1cd0 0000     ................
    2140:	6548 6c6c 206f 6f57 6c72 2164 0a0d 0000     Hello World!....

00002150 <_init>:
    2150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2156:	bc08      	pop	{r3}
    2158:	469e      	mov	lr, r3
    215a:	4770      	bx	lr

0000215c <__init_array_start>:
    215c:	000000b5 	.word	0x000000b5

00002160 <_fini>:
    2160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2166:	bc08      	pop	{r3}
    2168:	469e      	mov	lr, r3
    216a:	4770      	bx	lr

0000216c <__fini_array_start>:
    216c:	0000008d 	.word	0x0000008d
